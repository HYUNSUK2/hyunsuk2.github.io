{"posts":[{"title":"&#39;영어 일기&#39;","text":"i will wirte english diary here from tommorow oni hope i can archive that i made a plan for this year","link":"/2019/01/06/diary/"},{"title":"Angular 준비하기","text":"1 Angular 학습전 알아야 할 핵심 2가지1.1 Node.js 서버 사이드 자바 스크립트 실행환경 자바스크립트는 node.js가 설치된곳이면 어디서든지 실행 가능 자바 스크립트에게 브라우저라는 실행환경을 벗어나게 해줌 1.2 NPM(Node Pakage Manager) node.js 의 패키지(자바스크립트, HTML, CSS 등) 관리도구 소스를 패키지로 공유할 수 있고 패키지 의존성 관리를 가능하게함 Angular 또한 NPM 기반으로 프로젝트를 구성하고 의존성 패키지를 관리함 2 NPM 다루기2.1 package.json 프로젝트 생성시에 제일 먼저 생성해야 할 JSON 파일로 패키지와 의존 패키지 정보등을 선언함12345678910111213141516{ &quot;name&quot;: &quot;welcome-msg-app&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;dependencies&quot;: { &quot;http-server&quot;: &quot;^0.9.0&quot;, &quot;jquery&quot;: &quot;^1.12.4&quot; }, &quot;devDependencies&quot;: {}, &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; }, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;} 2.2 NPM 주요 명령어 npm install: pakage.json 파일 있는 경우 파일에 선언된 의존패키지를 설치하고npm install 뒤에 패키지명 입력하면 해당 패키지 설치함 npm run: pakage.json의 scripts에 선언된 명령을 수행 사랑에는 실패가 없다. Amelie Nothomb","link":"/2018/01/15/angular/"},{"title":"컴퓨터 보안 진로","text":"1 컴퓨터 보안 입문 하고자 할 때 알아야할 것보안을 처음 시작하려는 사람들은 보안회사에 들어가면 크게 4가지 일 중 하나를 하고 싶어한다1. 웹해킹2. 시스템 해킹3. 어플리케이션 해킹4. 네트워크 해킹이것들을 하기 위한 보안 학습 로드맵을 보자 로드맵을 보면 알다시피 보안을 하기 위해선 컴퓨터의 전반적인 지식을 알아야 할 수 있는것이다. 때문에 처음부터 보안회사를 들어 가는것 보다는 웹해킹을 하고싶으면 웹개발 회사, 시스템 해킹을 하고싶으면 시스템 개발 등 으로 진로를 잡고, 나중에 경력이 쌓이면 보안 진로로 가는게 좋다고 생각한다. 컴퓨터의 기본은 개발이 아닐까? 2 필자가 아는 국내 보안 진로 분야2.1 웹 해킹2.2 시스템 해킹2.3 어플리케이션 해킹2.4 네트워크 해킹2.5 해킹 툴 개발2.6 백신 개발2.7 기술 컨설팅2.8 관리 컨설팅2.9 시스템 운영2.10 관제해킹과 개발이 아닌 컨설팅과 운영, 관제 분야는 전문적인 기술을 요하지 않는다 큰 목표를 이루고 싶으면 허락을 구하지 마라. 미상","link":"/2018/01/15/secuermap/"},{"title":"Ssh를 이용하여 원격 서버와 파일 양방향 전송하기","text":"1. ssh를 이용하여 파일 복사 및 전송하기ssh에서 제공하는 scp 명령어를 통해 로컬서버↔원격서버 파일을 양방향 전송할 수 있다.1.1 사용방법 원격 서버 → 로컬 서버로 파일 전송 1# scp [옵션] [계정명]@[원격지IP주소]:[원본 경로 및 파일] [전송받을 위치] 예제1) IP 111.222.333.444 서버의 abc라는 계정으로 /home/abc/index.html 파일을 로컬서버 /home/me/ 디렉토리에 전송 받기 1# scp abc@111.222.333.444:/home/abc/index.html /home/me/ 예제2) (ssh의 기본 22번 포트가 아닐경우)IP 111.222.333.444 서버의 abc라는 계정으로 /home/abc/index.html 파일을 로컬서버 /home/me/ 디렉토리에 전송 받기 1# scp -P 321 abc@111.222.333.444:/home/abc/index.html /home/me/ (ssh 포트가 321일경우) 로컬 서버 → 원격 서버로 파일 전송 1# scp [옵션] [원본 경로 및 파일] [계정명]@[원격지IP주소]:[전송할 경로] 예제1) 로컬서버 /home/me/wow.html 파일을 IP 111.222.333.444 서버의 /home/abc/ 디렉토리에 전송 하기 1# scp /home/me/wow.html abc@111.222.333.444:/home/abc/ 예제2) (ssh의 기본 22번 포트가 아닐경우)로컬서버 /home/me/wow.html 파일을 IP 111.222.333.444 서버의 /home/abc/ 디렉토리에 전송 하기 1# scp -P 321 /home/me/wow.html abc@111.222.333.444:/home/abc/ (ssh 포트가 321일경우) [주의사항] 옵션중에 –P와 –p가 있으니 대/소문자 확인을 하여야 한다. -P : 포트번호를 지정함 -p : 원본파일 수정/사용시간 및 권한을 유지함 -r : 하위 디렉토리 및 파일 모두 복사함 상황을 가장 잘 활용하는 사람이 가장 좋은 상황을 맞는다 John Robert Wooden","link":"/2018/01/16/ssh/"},{"title":"&#39;Diary&#39;","text":"i have to write diary in english here because i had party with company co worker.i went out alone from comanpy party bucause i am having sick on my liver.it is first time to get pain to thisi think its time that i have to consiser my healty.i thought i had considered my healty before, but i didnt do it.if i have free time for tommow i think i have to check my body.they give me some signal to ask me check my body.i wanna live here in healthy","link":"/2019/01/07/diary/"},{"title":"&#39;Diary&#39;","text":"i couldn’t concentrate on my work because of the hangoveri think dringking will make me to in panic. so i should stop dringkingi will try.i was thinking that i spend time learning english more than learing programming during going back home after workit is needed to be balanced between them.to do these is that i should spend time efficiantlythere’s a lot to do if i want to do lots of things","link":"/2019/01/08/diary/"},{"title":"&#39;Diary&#39;","text":"today is friday that i most like!i used to like meeting freinds to drink and enjoy time on friday.but i wanna take some rest these days.ha, it is so difficult to wake up early morning.i hope i get used to waking up early.even though i have failed to get up some of days so farit is gonna be better.","link":"/2019/01/11/diary/"},{"title":"&#39;Diary&#39;","text":"today i got a salary offer for this year.although it’s gone up a lot by rate i am not happy with that.because i think evaluation of performance was not estimate in honest.excecutive dont know that who work honestly and hardthey just like the people who are relate with there businessof course i think part of it is rightbut they are needed to estimate in honest more","link":"/2019/01/15/diary/"},{"title":"&#39;Diary&#39;","text":"it’s been a long time to go to gym since i went last time.the reason why i did’nt go to gym is because i tried to go there when i adapt to getup early.rather, i think not to go there has weakened my staminaso i felt my health was becoming weak.i would go to gym again to overcome thathealth is most important thing for people","link":"/2019/01/16/diary/"},{"title":"&#39;Diary&#39;","text":"i was talking about life of employee with co worker during having dinnerone of us said that whatever the company does to us, we have to do our work in honesti didnt agree with that opinion, although working is our seconds life, we have our life each.so we dont have to sacrifice to the company.we have lots of things to do for getting so many experience.i think the purpose of living here is getting experienceenjoy life!~","link":"/2019/01/10/diary/"},{"title":"&#39;Diary&#39;","text":"i started to invest stocks 2days ago.i saw a lots of profit when i checked my stock accont to find some stock i wanna invest.the profit is what i get when i work for two days, so i felt good! please keep going up!~anyway the reason i did it is that i wanted to recover my money that lost from investing bitcoin.so i have to get money back~from anything…. although it is dangerous.the plan for the investing is that i will forget that i invsted after investing all of money i deposit to invest.i wish they are become big moeny when i check","link":"/2019/01/09/diary/"},{"title":"&#39;Diary&#39;","text":"finally i started making andorid application with a frinedactually we have lots of things to make that.but isn’t the saying that the beginning is half doneso today is meaningful day.although my friend dosnt enough time to do it because he is preparing to get the job nowwe have decided that we would meet once a weeki think the APP we are making is so useful to many things,so i wanna finish this in success","link":"/2019/01/14/diary/"},{"title":"&#39;Diary&#39;","text":"we were working around the public park after launch with coworkerduring working we were talking about successthen, one of my coworker tell me about his friend in collegethe friend always wake up at 5am and do so many things for self-developersince 20 years old.even she coded if there is noting to say when she was hanging out with friendwe were wondering how she live sowhatever if i wanna be something, i would have to do in sincerely","link":"/2019/01/17/diary/"},{"title":"&#39;Diary&#39;","text":"wow i have to look back what i did for today to write a diary every weekit seem to good for our brain to remember something, but it’s a little bit difficult thatwhat i write for dairyanyway i feel uncomfortable that the day i didnt wake up early to do my plani wrote that i failed to wake up here sometimes to reflect on myself herebut it’s been nothing changed… what the hell i did how can i do thati don’t know the way","link":"/2019/01/21/diary/"},{"title":"&#39;Diary&#39;","text":"i got a health checkup todayi had though that i had some problem in body, but anything wasnt came out about problem so far.to figure out weather my body condition is good or not, i need to wait.i thing i might not have any problem with the body.nothing with any problem for body is good, but sometime i feel pain on the body.okay maybe it is good to trust medical checkup and i live as usual.anyway i wanna success my morning project all weekday","link":"/2019/01/28/diary/"},{"title":"&#39;Diary&#39;","text":"i talked with friend on the phone on the bus after work.we talked lots of things and it was continued when i got home.the part that made me thought is that some question that if i could go back to pastwhen did i wanna go back.i said some childhood and explain why i decidedthen, suddenly i realized that i am real adult.i think i am not old but i am not young, so i have to be careful to spend time to do somethingactually i still dont know what is the best choice to do, but i will remember i wont live for others.","link":"/2019/01/22/diary/"},{"title":"&#39;Diary&#39;","text":"i asked that how should i try to learn speak english to teacher.the teacher said that dont think in korean just think in english.if i think in korean i have to translate to english, so when i think speaking english,that make me bother and take time.although it is unfamiliar to think in english first time i should do it to improve of itlet’s start to think in english during speaking or writing english","link":"/2019/01/30/diary/"},{"title":"&#39;Diary&#39;","text":"i usually talk in english with engoo teacher during worki realized i used same pattern and same word todayi wanna to express that deviate from the pattern and words i usei can’t express iti think that it is important to speak english well that think in freelyi wanna to think in english logic when i use itthe day would come someday","link":"/2019/01/29/diary/"},{"title":"하둡을 왜 쓰는 것일까?","text":"하둡을 왜 쓰는 것일까?빅데이터 처리 인터넷 사용자들의 기록(비정형 데이터) 생물학의 데이터 과학 등 대용량 처리하기에는 기존 RDBMS는 비효율적 비정형 데이터 분석 불가 확장하기가 힘들다 빅데이터 처리하기에 운영 비용이 기하급수적으로 비싸진다 빅데이터 처리 속도가 하둡 보다 느리다","link":"/2021/02/21/start-hadoop-study/"},{"title":"속도를 높이는 파이썬 코드","text":"기존 파이썬 코드를 빠르게 만드는 방법 상황에 맞는 정확한 데이터 구조 사용 (list, tuple, set, dict, etc…) for 루프 대신 while 루프 사용 컴프레헨션 사용 복수 할당 사용 ( a, b = 1, 2) 될 수 있으면 global 키워드를 줄이자 연산 작업에 많은 시간을 소요한다 라이브러리를 활용 제너레이터 사용 .사용 자제 (use sqart instead of math.sqart) 무한 반복문에 1 사용 True 사용 보다 런타임 줄일수 있음 큰 데이터 처리는 pandas, numpy, scipy 사용 참조링크","link":"/2021/02/23/speed-up-python-code/"},{"title":"Beautifulsoup으로 이미지 크롤링 안될 때 다른 방법으로 크롤링하기","text":"이미지 태그나 클래스명 등으로 크롤링 하려는데 안될 때 어떻게 해야할까? 여러가지 방법이 있겠지만 이번 글에서는 python, re(정규식) 모듈, requests 모듈을 이용해서 크롤링을 해보려고한다다음 이미지에서 강아지를 검색하면 브라우저 검색창에 아래 url이 나온다 1https://search.daum.net/search?w=img&amp;nil_search=btn&amp;DA=NTB&amp;enc=utf8&amp;q=%EA%B0%95%EC%95%84%EC%A7%80 이 url을 이용해서 python으로 request를 날려보자아래 사진을 보면 이미지 불러오는 url이 보인다 저 url을 정규식으로 추줄해보자더 좋은 정규식이 있을 텐데 저는 저렇게 해서 추출했습니다(정규식 내용은 분량이 큽니다 관심이 있으면 따로 찾아보자) 코드를 보자 정규식을 선언하고 url을 뽑아내는 전처리 작업을하고 이미지를 저장하는 코드룰 볼 수 있다 12345678910111213141516171819202122232425262728293031import requestsimport reimport timet1 = time.time()# 정규식 선언reg = re.compile('oimgurl: &quot;.{0,300}&quot;, cpid')url = 'https://search.daum.net/search?w=img&amp;nil_search=btn&amp;DA=NTB&amp;enc=utf8&amp;q=%EA%B0%95%EC%95%84%EC%A7%80'html = requests.get(url=url)html_raw_data = str(html.content)reg_iter = reg.finditer(html_raw_data)#url 이미지를 저장하는 함수def save_img(idx, img_url): res = requests.get(img_url).content with open(f'{idx}.jpg', 'wb') as f: # 이미지 관련 작업은 pillow 모듈을 사용하는게 좋다 # 예제에서는 사용 안함 (따로 설치가 필요) f.write(res) print(f'save {idx}')for idx, res_data in enumerate(reg_iter): # url 을 뽑아내는 전처리 작업 img_url = res_data.group().split('oimgurl:')[1].split(', cpid')[0].replace('&quot;', '') save_img(idx, img_url)t2 = time.time()print(t2-t1) 이렇게 하면 이미지가 저장되는 걸 볼 수 있다작업이 4초 넘게 걸렸는데 다음 포스트에서는 thread 와 비동기 함수를 사용하여작업 시간을 단축시키는 포스트를 올려보겠습니다","link":"/2021/02/25/python-row-crawling/"},{"title":"자료구조 시간 복잡도","text":"자료구조별 시간 복잡도실무에서 주로 사용했던 자료구조 시간복잡도를 정리해봤다 작업의 시간복잡도를 보고 효율적인 자료구조를 선택하자 자료구조 접근 검색 입력 삭제 array list O(1) O(n) O(n) O(n) set O(1) O(1) O(1) O(1) stack O(n) O(n) O(1) O(1) queue O(n) O(n) O(1) O(1) singled-linked list O(n) O(n) O(1) O(1) doubly-linked list O(n) O(n) O(1) O(1) hash table N/A O(log(n)) O(log(n) O(log(n) binary tree O(log(n)) O(log(n)) O(log(n)) O(log(n)) 습관적으로 탐색할 때도 list를 많이 사용했는데 탐색할 때는 list 대신 set을 사용하자 시간 복잡도 그래프 참조링크 파이썬 자료구조 시간복잡도 자료구조 시간복잡도","link":"/2021/02/26/data-structure-timecomplexity/"},{"title":"하둡 공부 순서","text":"하둡 공부 순서 HDFS MapReduce YARN Avro Parquet Flume Sqoop Pig Hive Crunch Spark Hbase Zookeeper 하둡 에코 시스템 HDFS, MapReduce, YARN은 하둡 기반 구성 요소라서 정확하게 이해할 필요성이 있다다른 요소들은 필요한 순서대로 공부하면 될 듯","link":"/2021/02/23/hadoop-study-order/"},{"title":"Zeromq 기본 개념","text":"zeromq 정리 1zeromq 개인 공부로 zmq 공식 문서 보고 필요한거 정리한 내용 ref https://zguide.zeromq.org/docs/ zeromq 특징 빠르다 여러 소켓 조합으로 방대한 네트워크 조합을 만들 수 있다 가볍다 유연하다 패턴 request-reply클라이언트와 서비스의 집합을 연결하는 패턴이것은 원격 프로시저 호출 및 작업 분산의 패턴 publish-subscribe publisher와 subscribe의 집합을 연결하는 패턴, 이것은 데이터 분산 패턴 pipeline 여러 단계와 루프를 가질 수 있는 fan-out / fan-in 패턴으로 노드를 연결 이것은 병렬 작업 분산 및 수집 패턴 exclusive pair 독점 쌍의 두 소켓을 연결하는 패턴 이것은 특정 고급적인 낮은 수준의 패턴 유효 소켓 조합 PUB and SUB REQ and REP REQ and ROUTER DEALER and REP DEALER and ROUTER DEALER and DEALER ROUTER and ROUTER PUSH and PULL PAIR and PAIR 연결 방법 inproc한 프로세스에서 스레드를 연결하기 위한 가장 빠른 방법 ipc tcp pgm epgm socket 조합 참고 한 코어에 여러 프로세스보다 여러 코어에 한 프로세스로 시작하는 게 좋음, 또한 스레드로 worker를 실행하면네트워크 홉, 지연 시간 및 네트워크 트래픽이 없음","link":"/2022/09/22/zmq/"},{"title":"Git 설정과 자주 쓰는 명령어","text":"git 세팅 이름 세팅 git config --global user.name \"Your Name\" ex) 이름 세팅 1git config --global user.name &quot;hyunsuk&quot; 이메일 세팅 git config --global user.email you@example.com ex) 이메일 세팅 1git config --global user.email ohs11244@naver.com git 자주 쓰는 명령어 git pull 원격 저장소 파일과 동기화 시키기 git status 신규, 변경 파일 상태 확인 명령어 git log 작업 이력 확인 git checkout -b [branch_name] 신규 branch를 만들고 해당 branch로 변경 ex) 새로 생성한 모든 파일 스테이징 상태로 만들기 1git add ./* git add [대상] 신규 생성 파일 스테이징 상태(commit 할 수 았는 상태) 로 만들어 줌 ex) 새로 생성한 모든 파일 스테이징 상태로 만들기 1git add ./* git commit -m “메세지 등록” 파일들 원격으로 올리기(push) 하기 전 메세지 등록 ex) 원격 올리기 전 메세지 등록 1git commit -m &quot;write message&quot; git push origin [branch name] [branch name]을 origin(원격 저장소 url) 로 업로드 ex) 원격 저장로 업로드 1git push origin develop git stash 최근 commit 시점에서부터 변경된 사항들을 백업하고 최근 commit 상태로 돌려 줌 git stash pop git stash로 백업한 부분을 꺼내와 현재 파일과 합침 git remote -v git 원격 저장소 url 주소 확인 git remote add [원격 저장소 별칭] [url] 원격 저장소 주소를 별칭으로 세팅함 ex) 원격 저장소 주소 세팅 1git remote add origin git@github.com:HYUNSUK2/hyunsuk2.github.io.git","link":"/2023/12/22/git-command/"},{"title":"예시로 알아보는 Python Heap Memory","text":"프로세스 메모리는 크게 code, data, stack, heap 영역이 있는데 이번 글에서는 stack, heap 영역을 다룰 예정이다그럼 heap 영역은 왜 알아야 할까? 파이썬은 모든 게 객체이기 때문, 즉 값을 heap에 저장하고 stack에서 참조한다 모든 thread는 자기 process heap memory 영역을 공유한다 이걸 이용해서 좀 더 유연한 프로세스를 만들 수 있다 객체를 무분별하게 생성하지 않기 위해서 버그를 찾기 위해 기타 등등… 간단하게 예시를 들면12345678910111213141516171819202122232425262728from threading import Threadfrom time import sleepdetect_word = 'dog'# 문장에 탐지 단어가 있는지 확인하는 함수def print_worker(): global detect_word text = 'dogs are cute' while 1: check = detect_word in text print(check) if check is False: break sleep(1)# 탐지 단어를 바꾸는 함수def change_worker(): global detect_word sleep(3) detect_word = 'cat'tread1 = Thread(target=print_worker)tread1.start()tread2 = Thread(target=change_worker)tread2.start() 실행 결과는 True True True False heap 메모리 그림을 보면 프로세스 실행 3초 뒤thread2가 detect_word를 cat으로 바꾸었기 때문에heap 메모리를 공유하는 thread1의 detect_word도 cat을 가리키고 있다dog는 reference counting이 0이 되어 GC에 의해 메모리 해제된다 간단한 예시지만 이런 특징을 사용해서 좀 더 유연한 프로그램을 만들 수 있다thread 프로그래밍이 장점이 많지만 메모리를 공유하기 때문에 연산 작업할 때는 lock을 사용하여 thread-safe하게 신경 써야 한다하지만 lock은 처리 시간을 느리게 하므로 주의가 필요하다","link":"/2021/02/27/python-heap-memory/"},{"title":"Python 병렬처리로 크롤링 시간 단축하기","text":"thread 와 concurrent.futures 사용으로 병렬 처리하기1. thread 사용으로 병렬 처리저번 코드에서 save_img 함수를 multi thread로 실행하면 좀 더 빠른 결과물을 얻을 수 있을 것 같다12345678910111213141516171819202122232425262728293031323334import requestsimport reimport threadingimport timet1 = time.time()reg = re.compile('oimgurl: &quot;.{0,300}&quot;, cpid')url = 'https://search.daum.net/search?w=img&amp;nil_search=btn&amp;DA=NTB&amp;enc=utf8&amp;q=%EA%B0%95%EC%95%84%EC%A7%80'html = requests.get(url=url)html_raw_data = str(html.content)reg_iter = reg.finditer(html_raw_data)thread_list = []def save_img(idx, img_url): res = requests.get(img_url).content with open(f'{idx}.jpg', 'wb') as f: f.write(res) print(f'save {idx}')for idx, res_data in enumerate(reg_iter): img_url = res_data.group().split('oimgurl:')[1].split(', cpid')[0].replace('&quot;', '') thread_worker = threading.Thread(target=save_img, args=(idx, img_url)) thread_worker.start() thread_list.append(thread_worker)for thread in thread_list: thread.join()t2 = time.time()print(t2-t1) 작업결과 작업 시간이 1초대로 단축된 걸 확인 할 수 있다2. concurrent.futures 사용으로 병렬 처리하기concurrent.futures는 비동기 처리 고수준 인터페이스 모듈이다 이 모듈을 써서 작업 시간을 줄여보자123456789101112131415161718192021222324252627282930313233import requestsimport reimport timefrom concurrent.futures import ThreadPoolExecutort1 = time.time()reg = re.compile('oimgurl: &quot;.{0,300}&quot;, cpid')url = 'https://search.daum.net/search?w=img&amp;nil_search=btn&amp;DA=NTB&amp;enc=utf8&amp;q=%EA%B0%95%EC%95%84%EC%A7%80'html = requests.get(url=url)html_raw_data = str(html.content)reg_iter = reg.finditer(html_raw_data)thread_list = []#url 이미지를 저장하는 함수def save_img(idx, img_url): res = requests.get(img_url).content with open(f'{idx}.jpg', 'wb') as f: # 이미지 관련 작업은 pillow 모듈을 사용하는게 좋다 # 예제에서는 사용 안함 (따로 설치가 필요) f.write(res) print(f'save {idx}')with ThreadPoolExecutor(max_workers=10) as executor: for idx, res_data in enumerate(reg_iter): # url 을 뽑아내는 전처리 작업 img_url = res_data.group().split('oimgurl:')[1].split(', cpid')[0].replace('&quot;', '') executor.submit(save_img, idx, img_url)t2 = time.time()print(t2 - t1) 작업결과 마찬가지로 작업 시간이 1초대로 단축된 걸 확인 할 수 있다 결론 I/O 작업이 있을 때 병렬 처리 작업을 활용하여 작업 시간을 단축시킬수 있다 상황에 따라 다르지만 될 수 있으면 thread 모듈보단 고수준 비동기 concurrent.futures 모듈을 사용하자 병렬처리 작업의 결과물을 리턴 받는 등 다양한 함수를 제공한다 참조링크","link":"/2021/02/26/python-crawling-thread-async/"},{"title":"Java 가상쓰레드 속도 비교","text":"목표 일반 thread 와 가상 thread 속도 비교하기(IO작업) 일반 thread 코드1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import java.net.URI;import java.net.http.HttpClient;import java.net.http.HttpRequest;import java.net.http.HttpResponse;import java.time.Duration;import java.time.Instant;import java.util.concurrent.CompletableFuture;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;public class PlatformThreadTest { public static void main(String[] args) throws Exception { var client = HttpClient.newHttpClient(); var request = HttpRequest.newBuilder() .uri(new URI(&quot;http://localhost:4000/&quot;)) .build(); int totalRequests = 100000; int batchSize = 100; int numBatches = totalRequests / batchSize; Instant start = Instant.now(); for (int batch = 0; batch &lt; numBatches; batch++) { var executor = Executors.newFixedThreadPool(batchSize); CompletableFuture&lt;?&gt;[] futures = new CompletableFuture&lt;?&gt;[batchSize]; for (int i = 0; i &lt; batchSize; i++) { futures[i] = CompletableFuture.runAsync(() -&gt; { try { HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString()); // System.out.println(&quot;Response code: &quot; + response.statusCode()); } catch (Exception e) { e.printStackTrace(); } }, executor); } CompletableFuture.allOf(futures).join(); executor.shutdown(); executor.awaitTermination(1, TimeUnit.MINUTES); } Instant end = Instant.now(); System.out.println(&quot;Time taken with platform threads: &quot; + Duration.between(start, end).toMillis() + &quot; ms&quot;); }} 가상 thread 코드1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import java.net.URI;import java.net.http.HttpClient;import java.net.http.HttpRequest;import java.net.http.HttpResponse;import java.time.Duration;import java.time.Instant;import java.util.concurrent.CompletableFuture;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;public class VirtualThreadTest { public static void main(String[] args) throws Exception { var client = HttpClient.newHttpClient(); var request = HttpRequest.newBuilder() .uri(new URI(&quot;http://localhost:4000/&quot;)) .build(); int totalRequests = 100000; int batchSize = 100; int numBatches = totalRequests / batchSize; Instant start = Instant.now(); for (int batch = 0; batch &lt; numBatches; batch++) { var executor = Executors.newVirtualThreadPerTaskExecutor(); CompletableFuture&lt;?&gt;[] futures = new CompletableFuture&lt;?&gt;[batchSize]; for (int i = 0; i &lt; batchSize; i++) { futures[i] = CompletableFuture.runAsync(() -&gt; { try { HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString()); // System.out.println(&quot;Response code: &quot; + response.statusCode()); } catch (Exception e) { e.printStackTrace(); } }, executor); } CompletableFuture.allOf(futures).join(); executor.shutdown(); executor.awaitTermination(1, TimeUnit.MINUTES); } Instant end = Instant.now(); System.out.println(&quot;Time taken with virtual threads: &quot; + Duration.between(start, end).toMillis() + &quot; ms&quot;); }} server 코드1234567891011121314const http = require('http');const hostname = '127.0.0.1';const port = 4000;const server = http.createServer((req, res) =&gt; { res.statusCode = 200; res.setHeader('Content-Type', 'text/plain'); res.end('Hello, World!\\n');});server.listen(port, hostname, () =&gt; { console.log(`Server running at http://${hostname}:${port}/`);}); client 10만 request 결과 일반 thread 12초 가상 thread 6초 정리 일반, 가상 쓰레드로 각각 10만번 요청했을 때 6, 12초가 걸렸다.cpu 연산에서는 차이가 없겠지만 IO 작업이 주 일때는 가상 쓰레드를 이용하자","link":"/2024/09/29/thread/"},{"title":"Sqlalchemy Pool_recycle 설정","text":"sqlalchemy pool_recycle옵션 세팅한 값(초) 후에 db 커넥션 풀을 다시 만든다. 디폴트는 -1 언제 세팅해야할까? mysql 처럼 디폴트로 커넥션 타임 아웃이 있는 db를 사용할 때 설정해줘야 한다 mysql을 사용하는데 pool_recycle 세팅을 안 한하고 배치 같은 작업을 돌린다면 1sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2006, 'MySQL server has gone away') 에러를 보게 될 것이다 사용 예시12POOL_RECYCLE_TIME = 60 * 60 * 4engine = create_engine(f&quot;mariadb+pymysql://{user}:{passwd}@{host}:{port}/{database}?charset=utf8mb4&quot;, pool_recycle=POOL_RECYCLE_TIME) db 별 디폴트 커넥션 타임 아웃 MySQL - 8시간 (28800초) PostgreSQL - 서버 설정에 따라 다름, 기본적으로는 타임아웃을 설정하지 않음 SQL Server - 클라이언트 측 설정에 따라 다름, 기본적으로는 remote query timeout 옵션이 600초(10분) Oracle - SQLNET.EXPIRE_TIME 설정에 따라 다름, 기본값은 설정되어 있지 않음 SQLite - 연결 타임아웃에 대한 기본 설정은 없음 MongoDB - 10분 (600000ms), net.timeout 설정에 따라 다름 참고 https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine.params.pool_recycle https://docs.sqlalchemy.org/en/13/core/pooling.html#pool-setting-recycle","link":"/2024/06/29/mysql-db-timeout/"},{"title":"Junit 기능 테스트","text":"목표 junit 기본 기능 테스트해보기 주 사용 어노테이션 @Test: 테스트 메서드를 나타냅니다. 이 어노테이션이 붙은 메서드는 테스트 프레임워크에 의해 실행@BeforeEach: 각 테스트 메서드가 실행되기 전에 실행되는 메서드를 나타냅니다. 테스트 초기화 작업에 사용@AfterEach: 각 테스트 메서드가 실행된 후에 실행되는 메서드를 나타냅니다. 테스트 정리 작업에 사용@BeforeAll: 모든 테스트 메서드가 실행되기 전에 한 번 실행되는 메서드를 나타냅니다. 주로 클래스 레벨의 초기화 작업에 사용@AfterAll: 모든 테스트 메서드가 실행된 후에 한 번 실행되는 메서드를 나타냅니다. 주로 클래스 레벨의 정리 작업에 사용@Disabled: 테스트 메서드나 클래스가 실행되지 않도록 합니다. 주석 처리와 비슷한 역할@DisplayName: 테스트 메서드의 이름을 지정합니다. 테스트 결과 보고서에 표시 주 사용 펑션들 assertEquals(expected, actual): 두 값이 같은지 확인assertNotEquals(unexpected, actual): 두 값이 같지 않은지 확인assertTrue(condition): 조건이 참인지 확인assertFalse(condition): 조건이 거짓인지 확인assertNull(object): 객체가 null인지 확인assertNotNull(object): 객체가 null이 아닌지 확인assertThrows(expectedType, executable): 예외가 발생하는지 확인 계산 클래스123456789public class Calculator { public int add(int a, int b) { return a + b; } public int subtract(int a, int b) { return a - b; }} 계산기 테스트 예시 코드1234567891011121314151617181920212223242526272829303132333435363738394041424344import org.junit.jupiter.api.Test;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.AfterAll;import org.junit.jupiter.api.Assertions;public class BasicTest { private Calculator calculator; @BeforeAll static void setupAll() { System.out.println(&quot;Before all tests&quot;); } @BeforeEach void setup() { System.out.println(&quot;Before each test&quot;); calculator = new Calculator(); } @Test void testAddition() { int result = calculator.add(1, 1); Assertions.assertEquals(2, result, &quot;1 + 1 should equal 2&quot;); } @Test void testSubtraction() { int result = calculator.subtract(2, 1); Assertions.assertEquals(1, result, &quot;2 - 1 should equal 1&quot;); } @AfterEach void tearDown() { System.out.println(&quot;After each test&quot;); } @AfterAll static void tearDownAll() { System.out.println(&quot;After all tests&quot;); }} 결과 IDE에서 test result 가 정상 처리 된 것을 확인 debug 콘솔에는 아래 출력을 확인Before all testsBefore each testAfter each testBefore each testAfter each testAfter all tests 정리 테스트 코드를 작성해야 나중에 유지보수 하기 좋고 생산성 좋다고 한다처음엔 테스트 코드 작성하기가 귀찮겠지만 기능을 추가할 때나 새로 코드를 짜야할 때테스트 코드부터 짜는 습관을 들여 테스트 주도 개발 이점을 느껴보자","link":"/2024/10/03/junitest/"}],"tags":[{"name":"english","slug":"english","link":"/tags/english/"},{"name":"angular","slug":"angular","link":"/tags/angular/"},{"name":"Security","slug":"Security","link":"/tags/Security/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"scp","slug":"scp","link":"/tags/scp/"},{"name":"file trans","slug":"file-trans","link":"/tags/file-trans/"},{"name":"hadoop","slug":"hadoop","link":"/tags/hadoop/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"speed up","slug":"speed-up","link":"/tags/speed-up/"},{"name":"crawling","slug":"crawling","link":"/tags/crawling/"},{"name":"data structure","slug":"data-structure","link":"/tags/data-structure/"},{"name":"list","slug":"list","link":"/tags/list/"},{"name":"stack","slug":"stack","link":"/tags/stack/"},{"name":"queue","slug":"queue","link":"/tags/queue/"},{"name":"hash table","slug":"hash-table","link":"/tags/hash-table/"},{"name":"binary tree","slug":"binary-tree","link":"/tags/binary-tree/"},{"name":"zeromq","slug":"zeromq","link":"/tags/zeromq/"},{"name":"message queue","slug":"message-queue","link":"/tags/message-queue/"},{"name":"network communication","slug":"network-communication","link":"/tags/network-communication/"},{"name":"zmq","slug":"zmq","link":"/tags/zmq/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"git command","slug":"git-command","link":"/tags/git-command/"},{"name":"git setting","slug":"git-setting","link":"/tags/git-setting/"},{"name":"git 자주 쓰는 명령어","slug":"git-자주-쓰는-명령어","link":"/tags/git-%EC%9E%90%EC%A3%BC-%EC%93%B0%EB%8A%94-%EB%AA%85%EB%A0%B9%EC%96%B4/"},{"name":"memory","slug":"memory","link":"/tags/memory/"},{"name":"heap","slug":"heap","link":"/tags/heap/"},{"name":"thread","slug":"thread","link":"/tags/thread/"},{"name":"concurrent.futures","slug":"concurrent-futures","link":"/tags/concurrent-futures/"},{"name":"virtual thread","slug":"virtual-thread","link":"/tags/virtual-thread/"},{"name":"java21","slug":"java21","link":"/tags/java21/"},{"name":"mysql timeout","slug":"mysql-timeout","link":"/tags/mysql-timeout/"},{"name":"sqlalchemy","slug":"sqlalchemy","link":"/tags/sqlalchemy/"},{"name":"pool_recycle","slug":"pool-recycle","link":"/tags/pool-recycle/"},{"name":"MySQL server has gone away","slug":"MySQL-server-has-gone-away","link":"/tags/MySQL-server-has-gone-away/"},{"name":"pyhton","slug":"pyhton","link":"/tags/pyhton/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"junit","slug":"junit","link":"/tags/junit/"},{"name":"test","slug":"test","link":"/tags/test/"}],"categories":[{"name":"english","slug":"english","link":"/categories/english/"},{"name":"IT","slug":"IT","link":"/categories/IT/"},{"name":"diary","slug":"english/diary","link":"/categories/english/diary/"},{"name":"Angular","slug":"IT/Angular","link":"/categories/IT/Angular/"},{"name":"Security","slug":"IT/Security","link":"/categories/IT/Security/"},{"name":"Linux","slug":"IT/Linux","link":"/categories/IT/Linux/"},{"name":"Hadoop","slug":"IT/Hadoop","link":"/categories/IT/Hadoop/"},{"name":"python","slug":"IT/python","link":"/categories/IT/python/"},{"name":"data structure","slug":"IT/data-structure","link":"/categories/IT/data-structure/"},{"name":"zeromq","slug":"IT/zeromq","link":"/categories/IT/zeromq/"},{"name":"git","slug":"IT/git","link":"/categories/IT/git/"},{"name":"JAVA","slug":"IT/JAVA","link":"/categories/IT/JAVA/"}],"pages":[{"title":"Google Search","text":"google-site-verification: ZVrx7hG35PIC_AqRYZvjkiXnjddW8AXIF0mD2lJJRTY","link":"/google-search/index.html"}]}