<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hyunsuk&#39;s Blog</title>
    <link>https://hyunsuk2.github.io/</link>
    
    <atom:link href="https://hyunsuk2.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Hyunsuk&#39;s Blog</description>
    <pubDate>Mon, 30 Jun 2025 22:52:56 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Cursor AI 코딩 도구 활용 가이드</title>
      <link>https://hyunsuk2.github.io/2025/06/27/cursor-use/</link>
      <guid>https://hyunsuk2.github.io/2025/06/27/cursor-use/</guid>
      <pubDate>Thu, 26 Jun 2025 22:11:26 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Cursor AI 코딩 도구의 효율적인 활용 방법 학습&lt;/li&gt;
&lt;li&gt;복잡한 프로젝트에서 AI와의 협업 프로세스 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><ul><li>Cursor AI 코딩 도구의 효율적인 활용 방법 학습</li><li>복잡한 프로젝트에서 AI와의 협업 프로세스 이해</li></ul><h2 id="1-Cursor-AI-개요"><a href="#1-Cursor-AI-개요" class="headerlink" title="1. Cursor AI 개요"></a>1. Cursor AI 개요</h2><h3 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h3><ul><li>Cursor는 AI 기반 코드 에디터로, 생성형 AI 기술을 활용하여 개발자의 코딩 생산성을 높이는 도구입니다.</li><li>실시간 코드 생성, 리팩토링, 버그 수정, 문서화 등 다양한 개발 작업을 AI와 협업하여 수행할 수 있습니다.</li></ul><h3 id="주요-특징"><a href="#주요-특징" class="headerlink" title="주요 특징"></a>주요 특징</h3><ul><li><strong>실시간 AI 어시스턴트</strong>: 코드 작성 중 즉시 AI의 도움을 받을 수 있습니다.</li><li><strong>컨텍스트 인식</strong>: 프로젝트 전체 구조를 이해하고 맥락에 맞는 제안을 제공합니다.</li><li><strong>멀티 모드 지원</strong>: Ask 모드와 Agent 모드를 통해 다양한 작업 방식을 지원합니다.</li></ul><h3 id="사용-시점"><a href="#사용-시점" class="headerlink" title="사용 시점"></a>사용 시점</h3><ul><li>프로토 타입 만들고 싶을 때</li><li>코드 리팩토링이나 최적화가 필요할 때</li><li>새로운 기술 스택 학습이 필요할 때</li><li>반복적인 코딩 작업을 자동화하고 싶을 때</li></ul><h2 id="2-Cursor-활용-전략"><a href="#2-Cursor-활용-전략" class="headerlink" title="2. Cursor 활용 전략"></a>2. Cursor 활용 전략</h2><h3 id="❌-비효율적인-사용-방법-피해야-할-패턴"><a href="#❌-비효율적인-사용-방법-피해야-할-패턴" class="headerlink" title="❌ 비효율적인 사용 방법 (피해야 할 패턴)"></a>❌ 비효율적인 사용 방법 (피해야 할 패턴)</h3><blockquote><p>⚠️ <strong>경고</strong>: 아래 방법들은 Cursor를 비효율적으로 사용하는 예시입니다. 실제 프로젝트에서는 사용하지 마세요!</p></blockquote><h4 id="잘못된-사용-패턴들"><a href="#잘못된-사용-패턴들" class="headerlink" title="잘못된 사용 패턴들"></a>잘못된 사용 패턴들</h4><h5 id="1-무작정-코드-생성-요청"><a href="#1-무작정-코드-생성-요청" class="headerlink" title="1. 무작정 코드 생성 요청"></a>1. 무작정 코드 생성 요청</h5><ul><li>“이 기능 만들어줘” - 구체적인 요구사항 없이 요청</li><li>“버그 고쳐줘” - 문제 상황에 대한 설명 없이 요청</li><li>“최적화해줘” - 성능 목표나 제약사항 명시 없이 요청</li></ul><h5 id="2-컨텍스트-부족한-요청"><a href="#2-컨텍스트-부족한-요청" class="headerlink" title="2. 컨텍스트 부족한 요청"></a>2. 컨텍스트 부족한 요청</h5><ul><li>프로젝트 구조 설명 없이 코드 요청</li><li>기존 코드 스타일이나 아키텍처 고려하지 않음</li><li>의존성이나 환경 설정 정보 제공하지 않음</li></ul><h5 id="3-세션-관리-부족"><a href="#3-세션-관리-부족" class="headerlink" title="3. 세션 관리 부족"></a>3. 세션 관리 부족</h5><ul><li>하나의 긴 세션에서 모든 작업 수행</li><li>작업 완료 후 커밋하지 않고 계속 진행</li><li>이전 대화 내용을 참고하지 않고 새로운 요청</li></ul><h5 id="4-모듈화-고려하지-않음"><a href="#4-모듈화-고려하지-않음" class="headerlink" title="4. 모듈화 고려하지 않음"></a>4. 모듈화 고려하지 않음</h5><ul><li>모든 기능을 하나의 파일에 구현 요청</li><li>코드 구조나 설계 패턴 고려하지 않음</li><li>확장성이나 유지보수성 고려하지 않음</li></ul><h4 id="문제점-분석"><a href="#문제점-분석" class="headerlink" title="문제점 분석"></a>문제점 분석</h4><ul><li><strong>비효율성</strong>: AI가 맥락을 이해하지 못해 부정확한 결과 도출</li><li><strong>시간 낭비</strong>: 반복적인 수정과 조정 과정 필요</li><li><strong>코드 품질 저하</strong>: 구조화되지 않은 코드 생성</li><li><strong>유지보수 어려움</strong>: 일관성 없는 코드 스타일과 구조</li></ul><h3 id="✅-효율적인-사용-방법"><a href="#✅-효율적인-사용-방법" class="headerlink" title="✅ 효율적인 사용 방법"></a>✅ 효율적인 사용 방법</h3><h4 id="1-복잡한-기능-구현-프로세스"><a href="#1-복잡한-기능-구현-프로세스" class="headerlink" title="1. 복잡한 기능 구현 프로세스"></a>1. 복잡한 기능 구현 프로세스</h4><h5 id="단계별-접근-방법"><a href="#단계별-접근-방법" class="headerlink" title="단계별 접근 방법"></a>단계별 접근 방법</h5><h6 id="1단계-계획-수립-Ask-모드-활용"><a href="#1단계-계획-수립-Ask-모드-활용" class="headerlink" title="1단계: 계획 수립 (Ask 모드 활용)"></a>1단계: 계획 수립 (Ask 모드 활용)</h6><ul><li>구현하고자 하는 기능의 구체적인 요구사항 정의</li><li>기술 스택과 아키텍처 선택 논의</li><li>구현 우선순위와 단계별 계획 수립</li></ul><h6 id="2단계-구현-실행-Agent-모드-활용"><a href="#2단계-구현-실행-Agent-모드-활용" class="headerlink" title="2단계: 구현 실행 (Agent 모드 활용)"></a>2단계: 구현 실행 (Agent 모드 활용)</h6><ul><li>수립된 계획에 따라 실제 코드 구현</li><li>단계별로 검증하고 피드백 반영</li><li>테스트 코드와 문서화 포함</li></ul><h6 id="3단계-검증-및-최적화"><a href="#3단계-검증-및-최적화" class="headerlink" title="3단계: 검증 및 최적화"></a>3단계: 검증 및 최적화</h6><ul><li>생성된 코드의 품질 검토</li><li>성능 최적화 및 리팩토링</li><li>코드 리뷰 및 개선사항 적용</li></ul><h4 id="2-채팅-세션-관리-전략"><a href="#2-채팅-세션-관리-전략" class="headerlink" title="2. 채팅 세션 관리 전략"></a>2. 채팅 세션 관리 전략</h4><h5 id="세션-관리-원칙"><a href="#세션-관리-원칙" class="headerlink" title="세션 관리 원칙"></a>세션 관리 원칙</h5><h6 id="1-작업-단위별-세션-분리"><a href="#1-작업-단위별-세션-분리" class="headerlink" title="1. 작업 단위별 세션 분리"></a>1. 작업 단위별 세션 분리</h6><ul><li>하나의 명확한 작업이 완료되면 새로운 세션 시작</li><li>관련 없는 작업들을 하나의 세션에서 처리하지 않음</li><li>세션별로 목표와 범위를 명확히 정의</li></ul><h6 id="2-컨텍스트-활용"><a href="#2-컨텍스트-활용" class="headerlink" title="2. 컨텍스트 활용"></a>2. 컨텍스트 활용</h6><ul><li>@past chats: 이전 대화 요약 참조</li><li>@Docs: 공식 문서 및 라이브러리 문서 활용</li><li>@Git: 특정 브랜치나 커밋 상태 참조</li><li>@Web&#x2F;@Link: 외부 리소스 및 참고 자료 활용</li><li>@Recent change: 최근 변경사항 참조</li></ul><h6 id="3-정기적인-커밋"><a href="#3-정기적인-커밋" class="headerlink" title="3. 정기적인 커밋"></a>3. 정기적인 커밋</h6><ul><li>의미 있는 작업 단위마다 Git 커밋 수행</li><li>커밋 메시지에 작업 내용 명확히 기록</li><li>브랜치 전략을 활용한 안전한 개발</li></ul><h4 id="3-코드-모듈화-전략"><a href="#3-코드-모듈화-전략" class="headerlink" title="3. 코드 모듈화 전략"></a>3. 코드 모듈화 전략</h4><h5 id="모듈화-접근-방법"><a href="#모듈화-접근-방법" class="headerlink" title="모듈화 접근 방법"></a>모듈화 접근 방법</h5><h6 id="1-아키텍처-설계-Ask-모드"><a href="#1-아키텍처-설계-Ask-모드" class="headerlink" title="1. 아키텍처 설계 (Ask 모드)"></a>1. 아키텍처 설계 (Ask 모드)</h6><ul><li>기능별 모듈 분리 전략 논의</li><li>의존성 관리 방안 수립</li><li>인터페이스 설계 및 계약 정의</li></ul><h6 id="2-단계별-구현-Agent-모드"><a href="#2-단계별-구현-Agent-모드" class="headerlink" title="2. 단계별 구현 (Agent 모드)"></a>2. 단계별 구현 (Agent 모드)</h6><ul><li>핵심 모듈부터 순차적 구현</li><li>각 모듈별 테스트 코드 작성</li><li>모듈 간 통합 테스트 수행</li></ul><h6 id="3-리팩토링-및-최적화"><a href="#3-리팩토링-및-최적화" class="headerlink" title="3. 리팩토링 및 최적화"></a>3. 리팩토링 및 최적화</h6><ul><li>코드 중복 제거 및 재사용성 향상</li><li>성능 최적화 및 메모리 사용량 개선</li><li>코드 가독성 및 유지보수성 향상</li></ul><h2 id="3-실제-사용-예시"><a href="#3-실제-사용-예시" class="headerlink" title="3. 실제 사용 예시"></a>3. 실제 사용 예시</h2><h3 id="예시-1-React-컴포넌트-라이브러리-개발"><a href="#예시-1-React-컴포넌트-라이브러리-개발" class="headerlink" title="예시 1: React 컴포넌트 라이브러리 개발"></a>예시 1: React 컴포넌트 라이브러리 개발</h3><h4 id="작업-시나리오-재사용-가능한-UI-컴포넌트-라이브러리-개발"><a href="#작업-시나리오-재사용-가능한-UI-컴포넌트-라이브러리-개발" class="headerlink" title="작업 시나리오: 재사용 가능한 UI 컴포넌트 라이브러리 개발"></a>작업 시나리오: 재사용 가능한 UI 컴포넌트 라이브러리 개발</h4><h5 id="1단계-계획-수립-Ask-모드"><a href="#1단계-계획-수립-Ask-모드" class="headerlink" title="1단계: 계획 수립 (Ask 모드)"></a>1단계: 계획 수립 (Ask 모드)</h5><p><strong>사용자</strong>: “React로 재사용 가능한 UI 컴포넌트 라이브러리를 만들고 싶어요.<br>TypeScript를 사용하고, Storybook으로 문서화하고,<br>테스트 커버리지 80% 이상을 목표로 하고 있어요.”</p><p><strong>AI 응답</strong>: </p><ul><li>컴포넌트 구조 설계 제안</li><li>기술 스택 조합 추천</li><li>개발 우선순위 및 단계별 계획 수립</li><li>아키텍처 패턴 논의</li></ul><h5 id="2단계-구현-실행-Agent-모드"><a href="#2단계-구현-실행-Agent-모드" class="headerlink" title="2단계: 구현 실행 (Agent 모드)"></a>2단계: 구현 실행 (Agent 모드)</h5><p><strong>사용자</strong>: “1단계에서 논의한 Button 컴포넌트부터 구현해주세요.”</p><p><strong>AI 실행</strong>:</p><ul><li>TypeScript 인터페이스 정의</li><li>컴포넌트 구현</li><li>스타일링 (styled-components 또는 CSS-in-JS)</li><li>테스트 코드 작성</li><li>Storybook 스토리 생성</li></ul><h5 id="3단계-검증-및-개선"><a href="#3단계-검증-및-개선" class="headerlink" title="3단계: 검증 및 개선"></a>3단계: 검증 및 개선</h5><ul><li>생성된 코드 리뷰</li><li>접근성(a11y) 개선</li><li>성능 최적화</li><li>문서화 완성</li></ul><h3 id="예시-2-API-서버-개발"><a href="#예시-2-API-서버-개발" class="headerlink" title="예시 2: API 서버 개발"></a>예시 2: API 서버 개발</h3><h4 id="작업-시나리오-Node-js-Express-API-서버-개발"><a href="#작업-시나리오-Node-js-Express-API-서버-개발" class="headerlink" title="작업 시나리오: Node.js Express API 서버 개발"></a>작업 시나리오: Node.js Express API 서버 개발</h4><h5 id="1단계-아키텍처-설계-Ask-모드"><a href="#1단계-아키텍처-설계-Ask-모드" class="headerlink" title="1단계: 아키텍처 설계 (Ask 모드)"></a>1단계: 아키텍처 설계 (Ask 모드)</h5><p><strong>사용자</strong>: “사용자 관리 기능이 있는 REST API를 만들고 싶어요.<br>JWT 인증, 데이터베이스는 MySQL,<br>로깅과 에러 핸들링도 포함하고 싶어요.”</p><p><strong>AI 응답</strong>:</p><ul><li>폴더 구조 및 모듈 분리 전략</li><li>미들웨어 구성 방안</li><li>데이터베이스 스키마 설계</li><li>보안 고려사항 및 베스트 프랙티스</li></ul><h5 id="2단계-단계별-구현-Agent-모드"><a href="#2단계-단계별-구현-Agent-모드" class="headerlink" title="2단계: 단계별 구현 (Agent 모드)"></a>2단계: 단계별 구현 (Agent 모드)</h5><p><strong>사용자</strong>: “사용자 등록&#x2F;로그인 API부터 구현해주세요.”</p><p><strong>AI 실행</strong>:</p><ul><li>데이터베이스 연결 설정</li><li>사용자 모델 및 스키마 생성</li><li>인증 미들웨어 구현</li><li>API 엔드포인트 구현</li><li>유효성 검사 및 에러 핸들링</li><li>테스트 코드 작성</li></ul><h5 id="3단계-통합-및-배포"><a href="#3단계-통합-및-배포" class="headerlink" title="3단계: 통합 및 배포"></a>3단계: 통합 및 배포</h5><ul><li>전체 API 통합 테스트</li><li>성능 최적화</li><li>환경 설정 관리</li><li>배포 스크립트 생성</li></ul><h2 id="4-고급-활용-기법"><a href="#4-고급-활용-기법" class="headerlink" title="4. 고급 활용 기법"></a>4. 고급 활용 기법</h2><h3 id="1-컨텍스트-주입-전략"><a href="#1-컨텍스트-주입-전략" class="headerlink" title="1. 컨텍스트 주입 전략"></a>1. 컨텍스트 주입 전략</h3><h4 id="효과적인-컨텍스트-활용"><a href="#효과적인-컨텍스트-활용" class="headerlink" title="효과적인 컨텍스트 활용"></a>효과적인 컨텍스트 활용</h4><h5 id="past-chats-활용"><a href="#past-chats-활용" class="headerlink" title="@past chats 활용"></a>@past chats 활용</h5><ul><li>이전 대화에서 결정된 아키텍처 결정사항 참조</li><li>해결된 문제들의 해결책 재사용</li><li>프로젝트 진행 상황 파악</li></ul><h5 id="Docs-활용"><a href="#Docs-활용" class="headerlink" title="@Docs 활용"></a>@Docs 활용</h5><ul><li>공식 라이브러리 문서 참조</li><li>API 사용법 및 베스트 프랙티스 확인</li><li>최신 버전 정보 및 변경사항 파악</li></ul><h5 id="Git-활용"><a href="#Git-활용" class="headerlink" title="@Git 활용"></a>@Git 활용</h5><ul><li>특정 브랜치의 코드 상태 참조</li><li>이전 구현과의 비교 분석</li><li>코드 리뷰 및 변경사항 추적</li></ul><h5 id="Web-Link-활용"><a href="#Web-Link-활용" class="headerlink" title="@Web&#x2F;@Link 활용"></a>@Web&#x2F;@Link 활용</h5><ul><li>외부 튜토리얼 및 가이드 참조</li><li>커뮤니티 솔루션 및 예시 코드 활용</li><li>최신 기술 트렌드 및 베스트 프랙티스 학습</li></ul><h2 id="5-문제-해결-및-트러블슈팅"><a href="#5-문제-해결-및-트러블슈팅" class="headerlink" title="5. 문제 해결 및 트러블슈팅"></a>5. 문제 해결 및 트러블슈팅</h2><h3 id="일반적인-문제와-해결책"><a href="#일반적인-문제와-해결책" class="headerlink" title="일반적인 문제와 해결책"></a>일반적인 문제와 해결책</h3><h4 id="자주-발생하는-문제들"><a href="#자주-발생하는-문제들" class="headerlink" title="자주 발생하는 문제들"></a>자주 발생하는 문제들</h4><h5 id="1-AI-응답이-부정확한-경우"><a href="#1-AI-응답이-부정확한-경우" class="headerlink" title="1. AI 응답이 부정확한 경우"></a>1. AI 응답이 부정확한 경우</h5><p><strong>문제</strong>: 생성된 코드가 요구사항과 맞지 않음<br><strong>해결책</strong>: </p><ul><li>요구사항을 더 구체적으로 명시</li><li>예시 코드나 참고 자료 제공</li><li>단계별로 검증하며 진행</li></ul><h5 id="2-코드-품질이-낮은-경우"><a href="#2-코드-품질이-낮은-경우" class="headerlink" title="2. 코드 품질이 낮은 경우"></a>2. 코드 품질이 낮은 경우</h5><p><strong>문제</strong>: 생성된 코드가 베스트 프랙티스를 따르지 않음<br><strong>해결책</strong>:</p><ul><li>코딩 스타일 가이드 제공</li><li>리팩토링 요청</li><li>코드 리뷰 및 개선사항 적용</li></ul><h5 id="3-성능-이슈가-있는-경우"><a href="#3-성능-이슈가-있는-경우" class="headerlink" title="3. 성능 이슈가 있는 경우"></a>3. 성능 이슈가 있는 경우</h5><p><strong>문제</strong>: 생성된 코드가 성능상 문제가 있음<br><strong>해결책</strong>:</p><ul><li>성능 요구사항 명시</li><li>최적화 요청</li><li>프로파일링 및 개선</li></ul><h5 id="4-의존성-충돌이-있는-경우"><a href="#4-의존성-충돌이-있는-경우" class="headerlink" title="4. 의존성 충돌이 있는 경우"></a>4. 의존성 충돌이 있는 경우</h5><p><strong>문제</strong>: 라이브러리 버전 충돌 또는 호환성 문제<br><strong>해결책</strong>:</p><ul><li>package.json 정보 제공</li><li>호환성 검증 요청</li><li>대안 라이브러리 제안 요청</li></ul><h2 id="6-베스트-프랙티스-요약"><a href="#6-베스트-프랙티스-요약" class="headerlink" title="6. 베스트 프랙티스 요약"></a>6. 베스트 프랙티스 요약</h2><h3 id="개발-프로세스"><a href="#개발-프로세스" class="headerlink" title="개발 프로세스"></a>개발 프로세스</h3><ol><li><strong>계획 수립</strong>: Ask 모드로 구현 계획 논의</li><li><strong>구현 실행</strong>: Agent 모드로 실제 코드 구현</li><li><strong>검증 및 개선</strong>: 코드 품질 검토 및 최적화</li><li><strong>문서화</strong>: 코드 및 API 문서 작성</li><li><strong>테스트</strong>: 단위 테스트 및 통합 테스트 수행</li></ol><h3 id="세션-관리"><a href="#세션-관리" class="headerlink" title="세션 관리"></a>세션 관리</h3><ol><li><strong>작업 단위별 세션 분리</strong>: 명확한 목표를 가진 세션 구성</li><li><strong>컨텍스트 활용</strong>: 다양한 컨텍스트 주입으로 정확도 향상</li><li><strong>정기적 커밋</strong>: 의미 있는 작업 단위마다 버전 관리</li><li><strong>문서화</strong>: 결정사항 및 아키텍처 문서화</li></ol><h3 id="코드-품질"><a href="#코드-품질" class="headerlink" title="코드 품질"></a>코드 품질</h3><ol><li><strong>모듈화</strong>: 기능별로 적절한 모듈 분리</li><li><strong>테스트</strong>: 충분한 테스트 커버리지 확보</li><li><strong>문서화</strong>: 코드 주석 및 API 문서 작성</li><li><strong>일관성</strong>: 프로젝트 전체의 코딩 스타일 통일</li></ol><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ul><li>Cursor는 AI와의 협업을 통해 개발 생산성을 높여주는 도구라 생각합니다.</li><li>적절한 프로세스와 전략을 통해 효율적인 개발이 가능합니다.</li><li>물론 코드 생성 완벽하게 믿지는 마세요. 코드 생성 후 반드시 검증과 수정이 필요합니다.</li></ul><h3 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h3><ul><li><a href="https://cursor.sh/docs">Cursor 공식 문서</a></li><li><a href="https://news.hada.io/topic?id=21608">Cursor 활용 팁</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/Tool/">Tool</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/cursor/">cursor</category>
      
      <category domain="https://hyunsuk2.github.io/tags/AI/">AI</category>
      
      <category domain="https://hyunsuk2.github.io/tags/AI-agent/">AI-agent</category>
      
      <category domain="https://hyunsuk2.github.io/tags/coding/">coding</category>
      
      <category domain="https://hyunsuk2.github.io/tags/auto/">auto</category>
      
      <category domain="https://hyunsuk2.github.io/tags/productivity/">productivity</category>
      
      
      <comments>https://hyunsuk2.github.io/2025/06/27/cursor-use/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>디자인 패턴 - Decorator Pattern</title>
      <link>https://hyunsuk2.github.io/2025/06/24/decorator-pattern/</link>
      <guid>https://hyunsuk2.github.io/2025/06/24/decorator-pattern/</guid>
      <pubDate>Tue, 24 Jun 2025 12:00:12 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;데코레이터 패턴 이해 및 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-데코레이터-패턴&quot;&gt;&lt;a href=&quot;#1-데코레이</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><ul><li>데코레이터 패턴 이해 및 구현</li></ul><h2 id="1-데코레이터-패턴"><a href="#1-데코레이터-패턴" class="headerlink" title="1. 데코레이터 패턴"></a>1. 데코레이터 패턴</h2><h3 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h3><ul><li>데코레이터 패턴은 객체에 추가 책임을 동적으로 추가하는 패턴입니다.</li><li>기존 코드를 변경하지 않고 새로운 기능을 추가할 수 있습니다.</li><li>서브클래스 구현보다 유연하게 기능을 확장할 수 있습니다.</li></ul><h3 id="사용-시점"><a href="#사용-시점" class="headerlink" title="사용 시점"></a>사용 시점</h3><ul><li>기존 코드를 변경하지 않고 새로운 기능을 추가할 때</li><li>기존 코드를 재사용하면서 새로운 기능을 추가할 때</li><li>런타임에 객체의 기능을 조합하고 싶을 때</li></ul><h3 id="클래스-다이어그램"><a href="#클래스-다이어그램" class="headerlink" title="클래스 다이어그램"></a>클래스 다이어그램</h3><pre><code class="highlight mermaid">classDiagram    class Beverage &#123;        &lt;&lt;abstract&gt;&gt;        #description: String        +cost(): double        +getDescription(): String    &#125;        class CondimentDecorator &#123;        &lt;&lt;abstract&gt;&gt;        #beverage: Beverage        +cost(): double        +getDescription(): String    &#125;        class Espresso &#123;        +cost(): double        +getDescription(): String    &#125;        class HouseBlend &#123;        +cost(): double        +getDescription(): String    &#125;        class DarkRoast &#123;        +cost(): double        +getDescription(): String    &#125;        class Decaf &#123;        +cost(): double        +getDescription(): String    &#125;        class Mocha &#123;        -beverage: Beverage        +Mocha(beverage: Beverage)        +cost(): double        +getDescription(): String    &#125;        class Soy &#123;        -beverage: Beverage        +Soy(beverage: Beverage)        +cost(): double        +getDescription(): String    &#125;        class Whip &#123;        -beverage: Beverage        +Whip(beverage: Beverage)        +cost(): double        +getDescription(): String    &#125;        class SteamedMilk &#123;        -beverage: Beverage        +SteamedMilk(beverage: Beverage)        +cost(): double        +getDescription(): String    &#125;        %% 상속 관계    Beverage &lt;|-- Espresso : extends    Beverage &lt;|-- HouseBlend : extends    Beverage &lt;|-- DarkRoast : extends    Beverage &lt;|-- Decaf : extends    Beverage &lt;|-- CondimentDecorator : extends    CondimentDecorator &lt;|-- Mocha : extends    CondimentDecorator &lt;|-- Soy : extends    CondimentDecorator &lt;|-- Whip : extends    CondimentDecorator &lt;|-- SteamedMilk : extends        %% 구성 관계 (Composition)    CondimentDecorator *-- Beverage : has</code></pre><h2 id="2-예시-코드"><a href="#2-예시-코드" class="headerlink" title="2. 예시 코드"></a>2. 예시 코드</h2><h3 id="❌-데코레이터-미적용-예시-코드-문제가-있는-설계"><a href="#❌-데코레이터-미적용-예시-코드-문제가-있는-설계" class="headerlink" title="❌ 데코레이터 미적용 예시 코드 (문제가 있는 설계)"></a>❌ 데코레이터 미적용 예시 코드 (문제가 있는 설계)</h3><blockquote><p>⚠️ <strong>경고</strong>: 아래 코드는 데코레이터 패턴을 적용하지 않은 잘못된 설계입니다. 실제 프로젝트에서는 사용하지 마세요!</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 문제가 있는 설계 - 모든 조합을 위한 클래스가 필요</span></span><br><span class="line"><span class="comment">// 클래스 폭발 문제 발생!</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;Unknown Beverage&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="variable">milk</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="variable">soy</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="variable">mocha</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="variable">whip</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 복잡하고 유지보수하기 어려운 cost() 메서드</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">condimentCost</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (hasMilk()) &#123;</span><br><span class="line">            condimentCost += <span class="number">0.10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasSoy()) &#123;</span><br><span class="line">            condimentCost += <span class="number">0.15</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasMocha()) &#123;</span><br><span class="line">            condimentCost += <span class="number">0.20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasWhip()) &#123;</span><br><span class="line">            condimentCost += <span class="number">0.10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> condimentCost;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 모든 토핑에 대한 getter/setter - 확장성 부족</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasMilk</span><span class="params">()</span> &#123; <span class="keyword">return</span> milk; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMilk</span><span class="params">(<span class="type">boolean</span> milk)</span> &#123; <span class="built_in">this</span>.milk = milk; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasSoy</span><span class="params">()</span> &#123; <span class="keyword">return</span> soy; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSoy</span><span class="params">(<span class="type">boolean</span> soy)</span> &#123; <span class="built_in">this</span>.soy = soy; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasMocha</span><span class="params">()</span> &#123; <span class="keyword">return</span> mocha; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMocha</span><span class="params">(<span class="type">boolean</span> mocha)</span> &#123; <span class="built_in">this</span>.mocha = mocha; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasWhip</span><span class="params">()</span> &#123; <span class="keyword">return</span> whip; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWhip</span><span class="params">(<span class="type">boolean</span> whip)</span> &#123; <span class="built_in">this</span>.whip = whip; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 모든 조합을 위한 클래스들 - 클래스 폭발 문제!</span></span><br><span class="line"><span class="comment">// 토핑이 4개면 2^4 = 16개의 클래스가 필요!</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DarkRoastWithMilk</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DarkRoastWithMilk</span><span class="params">()</span> &#123;</span><br><span class="line">        description = <span class="string">&quot;다크 로스트 커피, 스팀 밀크&quot;</span>;</span><br><span class="line">        setMilk(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.99</span> + <span class="built_in">super</span>.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DarkRoastWithMocha</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DarkRoastWithMocha</span><span class="params">()</span> &#123;</span><br><span class="line">        description = <span class="string">&quot;다크 로스트 커피, 모카&quot;</span>;</span><br><span class="line">        setMocha(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.99</span> + <span class="built_in">super</span>.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DarkRoastWithMilkAndMocha</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DarkRoastWithMilkAndMocha</span><span class="params">()</span> &#123;</span><br><span class="line">        description = <span class="string">&quot;다크 로스트 커피, 스팀 밀크, 모카&quot;</span>;</span><br><span class="line">        setMilk(<span class="literal">true</span>);</span><br><span class="line">        setMocha(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.99</span> + <span class="built_in">super</span>.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 더 많은 조합들... 계속해서 클래스가 늘어남</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DarkRoastWithMilkAndMochaAndWhip</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DarkRoastWithMilkAndMochaAndWhip</span><span class="params">()</span> &#123;</span><br><span class="line">        description = <span class="string">&quot;다크 로스트 커피, 스팀 밀크, 모카, 휘핑 크림&quot;</span>;</span><br><span class="line">        setMilk(<span class="literal">true</span>);</span><br><span class="line">        setMocha(<span class="literal">true</span>);</span><br><span class="line">        setWhip(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.99</span> + <span class="built_in">super</span>.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 테스트 코드 - 새로운 토핑 추가 시 모든 조합 클래스 필요</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarbuzzCoffeeWithoutDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 새로운 토핑이 추가되면 모든 조합의 클래스를 만들어야 함</span></span><br><span class="line">        <span class="comment">// 토핑이 4개면 2^4 = 16개의 클래스가 필요!</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">beverage1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DarkRoastWithMilk</span>();</span><br><span class="line">        System.out.println(beverage1.getDescription() + <span class="string">&quot; $&quot;</span> + beverage1.cost());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">beverage2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DarkRoastWithMilkAndMocha</span>();</span><br><span class="line">        System.out.println(beverage2.getDescription() + <span class="string">&quot; $&quot;</span> + beverage2.cost());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  새로운 토핑(바닐라)이 추가되면?</span></span><br><span class="line">        <span class="comment">//  DarkRoastWithVanilla, DarkRoastWithMilkAndVanilla, </span></span><br><span class="line">        <span class="comment">//  DarkRoastWithMochaAndVanilla, DarkRoastWithMilkAndMochaAndVanilla...</span></span><br><span class="line">        <span class="comment">// 계속해서 새로운 클래스들이 필요!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="문제점-분석"><a href="#문제점-분석" class="headerlink" title="문제점 분석"></a>문제점 분석</h3><ul><li><strong>클래스 폭발</strong>: 토핑이 n개면 2^n개의 클래스가 필요</li><li><strong>확장성 부족</strong>: 새로운 토핑 추가 시 모든 조합의 클래스를 생성해야 함</li><li><strong>유지보수 어려움</strong>: 각 클래스마다 중복된 코드가 많음</li><li><strong>런타임 유연성 부족</strong>: 주문 시점에 토핑을 동적으로 조합할 수 없음</li></ul><h3 id="✅-데코레이터-적용-예시-코드"><a href="#✅-데코레이터-적용-예시-코드" class="headerlink" title="✅ 데코레이터 적용 예시 코드"></a>✅ 데코레이터 적용 예시 코드</h3><h4 id="1-컴포넌트-인터페이스"><a href="#1-컴포넌트-인터페이스" class="headerlink" title="1. 컴포넌트 인터페이스"></a>1. 컴포넌트 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;Unknown Beverage&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-구체적인-음료-클래스들"><a href="#2-구체적인-음료-클래스들" class="headerlink" title="2. 구체적인 음료 클래스들"></a>2. 구체적인 음료 클래스들</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Espresso</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Espresso</span><span class="params">()</span> &#123;</span><br><span class="line">        description = <span class="string">&quot;에스프레소&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HouseBlend</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HouseBlend</span><span class="params">()</span> &#123;</span><br><span class="line">        description = <span class="string">&quot;하우스 블렌드 커피&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.89</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DarkRoast</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DarkRoast</span><span class="params">()</span> &#123;</span><br><span class="line">        description = <span class="string">&quot;다크 로스트 커피&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Decaf</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decaf</span><span class="params">()</span> &#123;</span><br><span class="line">        description = <span class="string">&quot;디카페인 커피&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.05</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-데코레이터-추상-클래스"><a href="#3-데코레이터-추상-클래스" class="headerlink" title="3. 데코레이터 추상 클래스"></a>3. 데코레이터 추상 클래스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Beverage beverage;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CondimentDecorator</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-구체적인-데코레이터-클래스들"><a href="#4-구체적인-데코레이터-클래스들" class="headerlink" title="4. 구체적인 데코레이터 클래스들"></a>4. 구체적인 데코레이터 클래스들</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mocha</span> <span class="keyword">extends</span> <span class="title class_">CondimentDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mocha</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, 모카&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.20</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Soy</span> <span class="keyword">extends</span> <span class="title class_">CondimentDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Soy</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, 두유&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.15</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Whip</span> <span class="keyword">extends</span> <span class="title class_">CondimentDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Whip</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, 휘핑 크림&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.10</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SteamedMilk</span> <span class="keyword">extends</span> <span class="title class_">CondimentDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SteamedMilk</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, 스팀 밀크&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.10</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-테스트-코드"><a href="#5-테스트-코드" class="headerlink" title="5. 테스트 코드"></a>5. 테스트 코드</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarbuzzCoffee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 에스프레소 주문</span></span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">beverage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Espresso</span>();</span><br><span class="line">        System.out.println(beverage.getDescription() + <span class="string">&quot; $&quot;</span> + beverage.cost());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 다크 로스트 + 모카 + 휘핑 크림 주문</span></span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">beverage2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DarkRoast</span>();</span><br><span class="line">        beverage2 = <span class="keyword">new</span> <span class="title class_">Mocha</span>(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> <span class="title class_">Mocha</span>(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> <span class="title class_">Whip</span>(beverage2);</span><br><span class="line">        System.out.println(beverage2.getDescription() + <span class="string">&quot; $&quot;</span> + beverage2.cost());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 하우스 블렌드 + 두유 + 모카 + 휘핑 크림 주문</span></span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">beverage3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HouseBlend</span>();</span><br><span class="line">        beverage3 = <span class="keyword">new</span> <span class="title class_">Soy</span>(beverage3);</span><br><span class="line">        beverage3 = <span class="keyword">new</span> <span class="title class_">Mocha</span>(beverage3);</span><br><span class="line">        beverage3 = <span class="keyword">new</span> <span class="title class_">Whip</span>(beverage3);</span><br><span class="line">        System.out.println(beverage3.getDescription() + <span class="string">&quot; $&quot;</span> + beverage3.cost());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 디카페인 + 스팀 밀크 + 모카 주문</span></span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">beverage4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Decaf</span>();</span><br><span class="line">        beverage4 = <span class="keyword">new</span> <span class="title class_">SteamedMilk</span>(beverage4);</span><br><span class="line">        beverage4 = <span class="keyword">new</span> <span class="title class_">Mocha</span>(beverage4);</span><br><span class="line">        System.out.println(beverage4.getDescription() + <span class="string">&quot; $&quot;</span> + beverage4.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">에스프레소 $1.99</span><br><span class="line">다크 로스트 커피, 모카, 모카, 휘핑 크림 $1.39</span><br><span class="line">하우스 블렌드 커피, 두유, 모카, 휘핑 크림 $1.34</span><br><span class="line">디카페인 커피, 스팀 밀크, 모카 $1.35</span><br></pre></td></tr></table></figure><h3 id="데코레이터-패턴-장점"><a href="#데코레이터-패턴-장점" class="headerlink" title="데코레이터 패턴 장점"></a>데코레이터 패턴 장점</h3><ol><li><strong>개방-폐쇄 원칙</strong>: 기존 코드를 수정하지 않고 새로운 기능을 추가할 수 있습니다.</li><li><strong>단일 책임 원칙</strong>: 각 데코레이터는 하나의 책임만 가집니다.</li><li><strong>유연성</strong>: 런타임에 객체의 기능을 조합할 수 있습니다.</li><li><strong>확장성</strong>: 새로운 데코레이터를 쉽게 추가할 수 있습니다.</li><li><strong>재사용성</strong>: 데코레이터를 다양한 컴포넌트와 조합하여 사용할 수 있습니다.</li></ol><h3 id="데코레이터-패턴-단점"><a href="#데코레이터-패턴-단점" class="headerlink" title="데코레이터 패턴 단점"></a>데코레이터 패턴 단점</h3><ol><li><strong>복잡성</strong>: 많은 데코레이터가 조합되면 코드가 복잡해질 수 있습니다.</li><li><strong>디버깅 어려움</strong>: 데코레이터 체인이 길어지면 디버깅이 어려울 수 있습니다.</li><li><strong>메모리 사용량</strong>: 각 데코레이터가 추가 객체를 생성하므로 메모리 사용량이 증가할 수 있습니다.</li><li><strong>구성 초기화 문제</strong>: 구성 요소가 많아지면 데코레이터 클래스 구성 요소 초기화가 복잡해질 수 있습니다.</li></ol><h3 id="실제-사용-예시"><a href="#실제-사용-예시" class="headerlink" title="실제 사용 예시"></a>실제 사용 예시</h3><ul><li><strong>Java I&#x2F;O</strong>: <code>InputStream</code>, <code>OutputStream</code>의 데코레이터들 (<code>BufferedInputStream</code>, <code>DataInputStream</code> 등)</li><li><strong>GUI 컴포넌트</strong>: 스크롤바, 테두리, 배경색 등을 동적으로 추가</li><li><strong>로깅 시스템</strong>: 다양한 로그 레벨과 포맷을 조합</li><li><strong>캐싱 시스템</strong>: 다양한 캐싱 전략을 조합</li></ul><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ul><li>데코레이터 패턴은 객체에 추가 책임을 동적으로 추가할 때 사용합니다.</li><li>기존 코드를 변경하지 않고 새로운 기능을 추가할 수 있습니다.</li><li>런타임에 객체의 기능을 조합하고 싶을 때 사용합니다.</li><li>개방-폐쇄 원칙을 잘 지키는 패턴입니다.</li></ul><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul><li>헤드퍼스트 디자인 패턴</li></ul>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/design-pattern/">design-pattern</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/java/">java</category>
      
      <category domain="https://hyunsuk2.github.io/tags/decorator-pattern/">decorator-pattern</category>
      
      
      <comments>https://hyunsuk2.github.io/2025/06/24/decorator-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>디자인 패턴 - Observer Pattern</title>
      <link>https://hyunsuk2.github.io/2025/06/20/observer-pattern/</link>
      <guid>https://hyunsuk2.github.io/2025/06/20/observer-pattern/</guid>
      <pubDate>Thu, 19 Jun 2025 22:03:56 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;옵저버 패턴 이해 및 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-옵저버-패턴&quot;&gt;&lt;a href=&quot;#1-옵저버-패턴&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><ul><li>옵저버 패턴 이해 및 구현</li></ul><h2 id="1-옵저버-패턴"><a href="#1-옵저버-패턴" class="headerlink" title="1. 옵저버 패턴"></a>1. 옵저버 패턴</h2><h3 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h3><ul><li>옵저버 패턴은 한 객체의 상태가 변경되면 그 객체에 의존하는 다른 객체들에게 연락이 가고 자동으로 내용이 변경되는 일대다 의존성을 정의합니다</li></ul><h3 id="사용-시점"><a href="#사용-시점" class="headerlink" title="사용 시점"></a>사용 시점</h3><ul><li>객체 간의 일대다 의존성을 정의하고 싶을 때</li><li>한 객체의 상태가 변경될 때 다른 객체들이 자동으로 알림을 받고 싶을 때</li><li>느슨한 결합을 유지하면서 객체 간 통신이 필요할 때</li></ul><h3 id="클래스-다이어그램"><a href="#클래스-다이어그램" class="headerlink" title="클래스 다이어그램"></a>클래스 다이어그램</h3><pre><code class="highlight mermaid">classDiagram    class Subject &#123;        &lt;&lt;interface&gt;&gt;        +registerObserver(observer: Observer)        +removeObserver(observer: Observer)        +notifyObservers()    &#125;        class Observer &#123;        &lt;&lt;interface&gt;&gt;        +update(temperature: float, humidity: float, pressure: float)    &#125;        class DisplayElement &#123;        &lt;&lt;interface&gt;&gt;        +display()    &#125;        class WeatherData &#123;        -observers: List~Observer~        -temperature: float        -humidity: float        -pressure: float        +registerObserver(observer: Observer)        +removeObserver(observer: Observer)        +notifyObservers()        +measurementsChanged()        +setMeasurements(temperature: float, humidity: float, pressure: float)    &#125;        class CurrentConditionsDisplay &#123;        -weatherData: Subject        -temperature: float        -humidity: float        +CurrentConditionsDisplay(weatherData: Subject)        +update(temperature: float, humidity: float, pressure: float)        +display()    &#125;        class StatisticsDisplay &#123;        -weatherData: Subject        -maxTemp: float        -minTemp: float        -tempSum: float        -numReadings: int        +StatisticsDisplay(weatherData: Subject)        +update(temperature: float, humidity: float, pressure: float)        +display()    &#125;        class ForecastDisplay &#123;        -weatherData: Subject        -currentPressure: float        -lastPressure: float        +ForecastDisplay(weatherData: Subject)        +update(temperature: float, humidity: float, pressure: float)        +display()    &#125;        %% 인터페이스 구현 관계    Subject &lt;|.. WeatherData : implements    Observer &lt;|.. CurrentConditionsDisplay : implements    Observer &lt;|.. StatisticsDisplay : implements    Observer &lt;|.. ForecastDisplay : implements    DisplayElement &lt;|.. CurrentConditionsDisplay : implements    DisplayElement &lt;|.. StatisticsDisplay : implements    DisplayElement &lt;|.. ForecastDisplay : implements        %% 구성 관계 (Composition)    WeatherData *-- Observer : has        %% 의존 관계 (Dependency)    CurrentConditionsDisplay --&gt; Subject : observes    StatisticsDisplay --&gt; Subject : observes    ForecastDisplay --&gt; Subject : observes</code></pre><h3 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h3><p>기상 스테이션과 다양한 디스플레이를 구현한 예시를 통해 옵저버 패턴을 살펴보겠습니다.</p><h4 id="1-주제-Subject-인터페이스"><a href="#1-주제-Subject-인터페이스" class="headerlink" title="1. 주제(Subject) 인터페이스"></a>1. 주제(Subject) 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-옵저버-Observer-인터페이스"><a href="#2-옵저버-Observer-인터페이스" class="headerlink" title="2. 옵저버(Observer) 인터페이스"></a>2. 옵저버(Observer) 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-디스플레이-인터페이스"><a href="#3-디스플레이-인터페이스" class="headerlink" title="3. 디스플레이 인터페이스"></a>3. 디스플레이 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DisplayElement</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-기상-데이터-클래스-주제"><a href="#4-기상-데이터-클래스-주제" class="headerlink" title="4. 기상 데이터 클래스 (주제)"></a>4. 기상 데이터 클래스 (주제)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherData</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeatherData</span><span class="params">()</span> &#123;</span><br><span class="line">        observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">measurementsChanged</span><span class="params">()</span> &#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMeasurements</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-현재-조건-디스플레이-옵저버"><a href="#5-현재-조건-디스플레이-옵저버" class="headerlink" title="5. 현재 조건 디스플레이 (옵저버)"></a>5. 현재 조건 디스플레이 (옵저버)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>, DisplayElement &#123;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;현재 조건: &quot;</span> + temperature + <span class="string">&quot;F 도, &quot;</span> + humidity + <span class="string">&quot;% 습도&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-통계-디스플레이-옵저버"><a href="#6-통계-디스플레이-옵저버" class="headerlink" title="6. 통계 디스플레이 (옵저버)"></a>6. 통계 디스플레이 (옵저버)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatisticsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>, DisplayElement &#123;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">maxTemp</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">minTemp</span> <span class="operator">=</span> <span class="number">200.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">tempSum</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">numReadings</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StatisticsDisplay</span><span class="params">(Subject weatherData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        tempSum += temperature;</span><br><span class="line">        numReadings++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (temperature &gt; maxTemp) &#123;</span><br><span class="line">            maxTemp = temperature;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (temperature &lt; minTemp) &#123;</span><br><span class="line">            minTemp = temperature;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;평균/최고/최저 온도 = &quot;</span> + (tempSum / numReadings) + <span class="string">&quot;/&quot;</span> + maxTemp + <span class="string">&quot;/&quot;</span> + minTemp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-예보-디스플레이-옵저버"><a href="#7-예보-디스플레이-옵저버" class="headerlink" title="7. 예보 디스플레이 (옵저버)"></a>7. 예보 디스플레이 (옵저버)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForecastDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>, DisplayElement &#123;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">currentPressure</span> <span class="operator">=</span> <span class="number">29.92f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> lastPressure;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ForecastDisplay</span><span class="params">(Subject weatherData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        lastPressure = currentPressure;</span><br><span class="line">        currentPressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;예보: &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentPressure &gt; lastPressure) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;날씨가 좋아지고 있습니다!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentPressure == lastPressure) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;날씨가 그대로입니다.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentPressure &lt; lastPressure) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;비가 올 것 같습니다.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-테스트-코드"><a href="#8-테스트-코드" class="headerlink" title="8. 테스트 코드"></a>8. 테스트 코드</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherStation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeatherData</span> <span class="variable">weatherData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeatherData</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">CurrentConditionsDisplay</span> <span class="variable">currentDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CurrentConditionsDisplay</span>(weatherData);</span><br><span class="line">        <span class="type">StatisticsDisplay</span> <span class="variable">statisticsDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StatisticsDisplay</span>(weatherData);</span><br><span class="line">        <span class="type">ForecastDisplay</span> <span class="variable">forecastDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForecastDisplay</span>(weatherData);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;=== 첫 번째 측정 ===&quot;</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 두 번째 측정 ===&quot;</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2f</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 세 번째 측정 ===&quot;</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">78</span>, <span class="number">90</span>, <span class="number">29.2f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">=== 첫 번째 측정 ===</span><br><span class="line">현재 조건: 80.0F 도, 65.0% 습도</span><br><span class="line">평균/최고/최저 온도 = 80.0/80.0/80.0</span><br><span class="line">예보: 날씨가 좋아지고 있습니다!</span><br><span class="line"></span><br><span class="line">=== 두 번째 측정 ===</span><br><span class="line">현재 조건: 82.0F 도, 70.0% 습도</span><br><span class="line">평균/최고/최저 온도 = 81.0/82.0/80.0</span><br><span class="line">예보: 비가 올 것 같습니다.</span><br><span class="line"></span><br><span class="line">=== 세 번째 측정 ===</span><br><span class="line">현재 조건: 78.0F 도, 90.0% 습도</span><br><span class="line">평균/최고/최저 온도 = 80.0/82.0/78.0</span><br><span class="line">예보: 날씨가 그대로입니다.</span><br></pre></td></tr></table></figure><h3 id="옵저버-패턴-장점"><a href="#옵저버-패턴-장점" class="headerlink" title="옵저버 패턴 장점"></a>옵저버 패턴 장점</h3><ol><li>느슨한 결합: 주제와 옵저버가 느슨하게 결합되어 있습니다.</li><li>확장성: 새로운 옵저버를 쉽게 추가할 수 있습니다.</li><li>일대다 관계: 하나의 주제가 여러 옵저버에게 알림을 보낼 수 있습니다.</li><li>자동 알림: 주제의 상태가 변경되면 모든 옵저버가 자동으로 알림을 받습니다.</li></ol><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ul><li>옵저버 패턴은 객체 간의 일대다 의존성을 정의할 때 사용합니다.</li><li>한 객체의 상태가 변경될 때 다른 객체들이 자동으로 알림을 받고 싶을 때 사용합니다.</li><li>느슨한 결합을 유지하면서 객체 간 통신이 필요할 때 사용합니다.</li></ul><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul><li>헤드퍼스트 디자인 패턴</li></ul>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/design-pattern/">design-pattern</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/java/">java</category>
      
      <category domain="https://hyunsuk2.github.io/tags/observer-pattern/">observer-pattern</category>
      
      
      <comments>https://hyunsuk2.github.io/2025/06/20/observer-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>디자인 패턴 - Composition</title>
      <link>https://hyunsuk2.github.io/2025/06/18/composition/</link>
      <guid>https://hyunsuk2.github.io/2025/06/18/composition/</guid>
      <pubDate>Wed, 18 Jun 2025 13:07:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;컴포지션 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-컴포지션&quot;&gt;&lt;a href=&quot;#1-컴포지션&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><ul><li>컴포지션 사용</li></ul><h2 id="1-컴포지션"><a href="#1-컴포지션" class="headerlink" title="1. 컴포지션"></a>1. 컴포지션</h2><h3 id="사용-시점"><a href="#사용-시점" class="headerlink" title="사용 시점"></a>사용 시점</h3><ul><li>객체 간의 관계를 “has-a” 관계로 표현하고 싶을 때</li><li>런타임에 객체의 동작을 변경하고 싶을 때</li><li>상속 대신 유연한 구조가 필요할 때</li></ul><h3 id="클래스-다이어그램"><a href="#클래스-다이어그램" class="headerlink" title="클래스 다이어그램"></a>클래스 다이어그램</h3><pre><code class="highlight mermaid">classDiagram    class WeaponBehavior &#123;        &lt;&lt;interface&gt;&gt;        +useWeapon()    &#125;        class Character &#123;        #weaponBehavior: WeaponBehavior        +setWeaponBehavior(wb: WeaponBehavior)        +performWeapon()        +display()*    &#125;        class Knight &#123;        +display()    &#125;        class Archer &#123;        +display()    &#125;        class SwordBehavior &#123;        +useWeapon()    &#125;        class BowBehavior &#123;        +useWeapon()    &#125;        WeaponBehavior &lt;|.. SwordBehavior : implements    WeaponBehavior &lt;|.. BowBehavior : implements    Character &lt;|-- Knight : extends    Character &lt;|-- Archer : extends    Character *-- WeaponBehavior : has</code></pre><h3 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h3><p>게임 캐릭터와 무기 시스템을 구현한 예시를 통해 컴포지션을 살펴보겠습니다.</p><h4 id="1-무기-행동-인터페이스"><a href="#1-무기-행동-인터페이스" class="headerlink" title="1. 무기 행동 인터페이스"></a>1. 무기 행동 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WeaponBehavior</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">useWeapon</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-구체적인-무기-행동-구현"><a href="#2-구체적인-무기-행동-구현" class="headerlink" title="2. 구체적인 무기 행동 구현"></a>2. 구체적인 무기 행동 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 검 사용</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwordBehavior</span> <span class="keyword">implements</span> <span class="title class_">WeaponBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useWeapon</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;검으로 베기 공격!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 활 사용</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BowBehavior</span> <span class="keyword">implements</span> <span class="title class_">WeaponBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useWeapon</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;활로 화살 발사!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-캐릭터-추상-클래스"><a href="#3-캐릭터-추상-클래스" class="headerlink" title="3. 캐릭터 추상 클래스"></a>3. 캐릭터 추상 클래스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> WeaponBehavior weaponBehavior;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeaponBehavior</span><span class="params">(WeaponBehavior wb)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weaponBehavior = wb;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performWeapon</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (weaponBehavior != <span class="literal">null</span>) &#123;</span><br><span class="line">            weaponBehavior.useWeapon();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;무기가 없습니다!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-구체적인-캐릭터-클래스"><a href="#4-구체적인-캐릭터-클래스" class="headerlink" title="4. 구체적인 캐릭터 클래스"></a>4. 구체적인 캐릭터 클래스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기사 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knight</span> <span class="keyword">extends</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Knight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 기본적으로 검을 장착</span></span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> <span class="title class_">SwordBehavior</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;나는 기사입니다!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 궁수 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Archer</span> <span class="keyword">extends</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Archer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 기본적으로 활을 장착</span></span><br><span class="line">        weaponBehavior = <span class="keyword">new</span> <span class="title class_">BowBehavior</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;나는 궁수입니다!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-테스트-코드"><a href="#5-테스트-코드" class="headerlink" title="5. 테스트 코드"></a>5. 테스트 코드</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 기사 생성</span></span><br><span class="line">        <span class="type">Character</span> <span class="variable">knight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Knight</span>();</span><br><span class="line">        knight.display();</span><br><span class="line">        knight.performWeapon();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 궁수 생성</span></span><br><span class="line">        <span class="type">Character</span> <span class="variable">archer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Archer</span>();</span><br><span class="line">        archer.display();</span><br><span class="line">        archer.performWeapon();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 무기 교체</span></span><br><span class="line">        System.out.println(<span class="string">&quot;기사가 활로 무기를 교체합니다!&quot;</span>);</span><br><span class="line">        knight.setWeaponBehavior(<span class="keyword">new</span> <span class="title class_">BowBehavior</span>());</span><br><span class="line">        knight.performWeapon();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;궁수가 검으로 무기를 교체합니다!&quot;</span>);</span><br><span class="line">        archer.setWeaponBehavior(<span class="keyword">new</span> <span class="title class_">SwordBehavior</span>());</span><br><span class="line">        archer.performWeapon();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">나는 기사입니다!</span><br><span class="line">검으로 베기 공격!</span><br><span class="line">나는 궁수입니다!</span><br><span class="line">활로 화살 발사!</span><br><span class="line"></span><br><span class="line">기사가 활로 무기를 교체합니다!</span><br><span class="line">활로 화살 발사!</span><br><span class="line"></span><br><span class="line">궁수가 검으로 무기를 교체합니다!</span><br><span class="line">검으로 베기 공격!</span><br></pre></td></tr></table></figure><h3 id="컴포지션-장점"><a href="#컴포지션-장점" class="headerlink" title="컴포지션 장점"></a>컴포지션 장점</h3><ol><li>유연성: 런타임에 무기를 교체할 수 있습니다.</li><li>확장성: 새로운 무기나 캐릭터를 쉽게 추가할 수 있습니다.</li><li>재사용성: 무기 행동을 다른 클래스에서도 재사용할 수 있습니다.</li><li>캡슐화: 무기 관련 동작이 <code>WeaponBehavior</code> 인터페이스에 캡슐화되어 있습니다.</li></ol><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ul><li>컴포지션은 객체 간의 관계를 “has-a” 관계로 표현하고 싶을 때 사용합니다.</li><li>상속 대신 유연한 구조가 필요할 때 사용합니다.</li><li>런타임에 객체의 동작을 변경하고 싶을 때 사용합니다.</li><li>상속 대신 유연한 구조가 필요할 때 사용합니다.</li></ul><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul><li>헤드퍼스트 디자인 패턴</li></ul>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/design-pattern/">design-pattern</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2025/06/18/composition/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>리팩토링 스터디1</title>
      <link>https://hyunsuk2.github.io/2025/06/01/refactor/</link>
      <guid>https://hyunsuk2.github.io/2025/06/01/refactor/</guid>
      <pubDate>Sun, 01 Jun 2025 02:14:53 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h1&gt;&lt;p&gt;리팩토링 스터디 &lt;/p&gt;
&lt;h1 id=&quot;리팩터링-예시-chapter-1&quot;&gt;&lt;a href=&quot;#리팩터링-예시-chapter-1&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><p>리팩토링 스터디 </p><h1 id="리팩터링-예시-chapter-1"><a href="#리팩터링-예시-chapter-1" class="headerlink" title="리팩터링:예시 - chapter 1"></a>리팩터링:예시 - chapter 1</h1><h2 id="1-리팩터링이란"><a href="#1-리팩터링이란" class="headerlink" title="1. 리팩터링이란?"></a>1. 리팩터링이란?</h2><p>리팩터링은 코드의 외부 동작은 그대로 유지한 채, 코드 구조를 개선하는 작업입니다. 마치 집을 리모델링하는 것처럼, 기존 기능은 그대로 유지하면서 내부 구조를 개선하는 것입니다.</p><h2 id="2-리팩터링이-필요한-이유"><a href="#2-리팩터링이-필요한-이유" class="headerlink" title="2. 리팩터링이 필요한 이유"></a>2. 리팩터링이 필요한 이유</h2><ul><li>코드의 가독성 향상</li><li>버그 수정 용이성 증가</li><li>새로운 기능 추가가 쉬워짐</li><li>코드 재사용성 향상</li><li>유지보수 비용 감소</li></ul><h2 id="3-주요-리팩터링-기법"><a href="#3-주요-리팩터링-기법" class="headerlink" title="3. 주요 리팩터링 기법"></a>3. 주요 리팩터링 기법</h2><h3 id="3-1-변수-관련-리팩터링"><a href="#3-1-변수-관련-리팩터링" class="headerlink" title="3.1 변수 관련 리팩터링"></a>3.1 변수 관련 리팩터링</h3><ul><li><p><strong>변수 이름 바꾸기</strong></p><ul><li>명확한 이름으로 변경하는 것을 주저하지 않기</li><li>IDE의 리팩터링 도구 활용 권장</li></ul></li><li><p><strong>임시 변수 처리</strong></p><ul><li>임시 변수는 질의 함수로 변경</li><li>값이 바뀌지 않는 변수는 인라인화</li><li>사용하는 변수는 바로 앞단에 위치시키기</li></ul></li></ul><h3 id="3-2-함수-관련-리팩터링"><a href="#3-2-함수-관련-리팩터링" class="headerlink" title="3.2 함수 관련 리팩터링"></a>3.2 함수 관련 리팩터링</h3><ul><li><p><strong>반복문 쪼개기</strong></p><ul><li>기능별로 for문 분리</li><li>주의사항: 성능 영향 확인 필요<ul><li>컴파일러 캐싱 기법으로 인한 성능 영향</li><li>실제 실행 환경에서 테스트 필요</li></ul></li></ul></li><li><p><strong>문장 슬라이드</strong></p><ul><li>관련 코드를 가까이 배치</li><li>임시 변수를 질의 함수로 변경하기 쉽게 만듦</li></ul></li></ul><h3 id="3-3-구조-개선-리팩터링"><a href="#3-3-구조-개선-리팩터링" class="headerlink" title="3.3 구조 개선 리팩터링"></a>3.3 구조 개선 리팩터링</h3><ul><li><p><strong>단계 쪼개기</strong></p><ul><li>계산 단계와 표현 단계 분리</li><li>각 단계별 책임 명확화</li></ul></li><li><p><strong>생성자를 팩터리 함수로 변경</strong></p><ul><li>JavaScript의 생성자 제한 해결</li><li>서브클래스 인스턴스 반환 가능</li></ul></li><li><p><strong>조건부 로직을 다형성으로 변경</strong></p><ul><li>서브클래스별 로직 분리</li><li>슈퍼클래스는 추상 메서드만 정의</li><li>서브클래스에서 구체적 구현</li></ul></li></ul><h3 id="3-4-데이터-처리-리팩터링"><a href="#3-4-데이터-처리-리팩터링" class="headerlink" title="3.4 데이터 처리 리팩터링"></a>3.4 데이터 처리 리팩터링</h3><ul><li><strong>얕은 복사 활용</strong><ul><li>가변 데이터를 불변 데이터로 사용</li><li>부작용 방지</li></ul></li></ul><h2 id="4-리팩터링-진행-단계"><a href="#4-리팩터링-진행-단계" class="headerlink" title="4. 리팩터링 진행 단계"></a>4. 리팩터링 진행 단계</h2><ol><li><p><strong>중첩 함수 분리</strong></p><ul><li>여러 개의 독립적인 함수로 분리</li><li>상위 함수 변수 접근 가능</li></ul></li><li><p><strong>단계 쪼개기</strong></p><ul><li>계산 코드와 출력 코드 분리</li><li>각 단계의 책임 명확화</li></ul></li><li><p><strong>다형성 적용</strong></p><ul><li>계산 로직을 다형성으로 표현</li><li>확장성과 유지보수성 향상</li></ul></li></ol><h2 id="5-좋은-코드의-기준"><a href="#5-좋은-코드의-기준" class="headerlink" title="5. 좋은 코드의 기준"></a>5. 좋은 코드의 기준</h2><ul><li>수정하기 쉬운 코드</li><li>이해하기 쉬운 코드</li><li>재사용하기 쉬운 코드</li><li>테스트하기 쉬운 코드</li></ul><h2 id="6-리팩터링-시-주의사항"><a href="#6-리팩터링-시-주의사항" class="headerlink" title="6. 리팩터링 시 주의사항"></a>6. 리팩터링 시 주의사항</h2><ul><li>테스트 코드 작성 필수</li><li>작은 단계로 나누어 진행</li><li>각 단계마다 테스트 실행</li><li>성능 영향 고려</li></ul><h2 id="레퍼런스"><a href="#레퍼런스" class="headerlink" title="레퍼런스"></a>레퍼런스</h2><ul><li>리팩터링2판</li></ul>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/refactor/">refactor</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/refactor/">refactor</category>
      
      
      <comments>https://hyunsuk2.github.io/2025/06/01/refactor/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>디자인 패턴</title>
      <link>https://hyunsuk2.github.io/2025/06/01/design-pattern/</link>
      <guid>https://hyunsuk2.github.io/2025/06/01/design-pattern/</guid>
      <pubDate>Sun, 01 Jun 2025 02:14:15 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;전략 패턴 사용&lt;/li&gt;
&lt;li&gt;옵저버 패턴 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-전략-패턴-Strategy-</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><ul><li>전략 패턴 사용</li><li>옵저버 패턴 사용</li></ul><h2 id="1-전략-패턴-Strategy-Pattern"><a href="#1-전략-패턴-Strategy-Pattern" class="headerlink" title="1.전략 패턴 (Strategy Pattern)"></a>1.전략 패턴 (Strategy Pattern)</h2><h3 id="사용-시점"><a href="#사용-시점" class="headerlink" title="사용 시점"></a>사용 시점</h3><ul><li><strong>유사한 기능을 하는 여러 클래스</strong>가 존재할 때<ul><li>예: 다양한 결제 수단 (신용카드, 카카오페이, 토스페이)</li><li>예: 다양한 인증 방식 (JWT, OAuth, Basic Auth)</li><li>예: 다양한 캐싱 전략 (Redis, Memcached, Local Cache)</li><li>예: 다양한 로깅 방식 (File, Console, Cloud)</li></ul></li></ul><h3 id="구현-예제"><a href="#구현-예제" class="headerlink" title="구현 예제"></a>구현 예제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결제 수단 인터페이스 (Strategy)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentStrategy</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 결제 수단 구현 (Concrete Strategies)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCardPayment</span>(<span class="title class_ inherited__">PaymentStrategy</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;신용카드로 <span class="subst">&#123;amount&#125;</span>원 결제 완료!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KakaoPayPayment</span>(<span class="title class_ inherited__">PaymentStrategy</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;카카오페이로 <span class="subst">&#123;amount&#125;</span>원 결제 완료!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결제 프로세서 (Context)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentProcessor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, payment_strategy: PaymentStrategy</span>):</span><br><span class="line">        <span class="variable language_">self</span>.payment_strategy = payment_strategy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="variable language_">self</span>.payment_strategy.pay(amount)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사용 예시</span></span><br><span class="line">payment = PaymentProcessor(KakaoPayPayment())</span><br><span class="line">payment.pay(<span class="number">10000</span>)</span><br></pre></td></tr></table></figure><h2 id="2-옵저버-패턴-Observer-Pattern"><a href="#2-옵저버-패턴-Observer-Pattern" class="headerlink" title="2.옵저버 패턴 (Observer Pattern)"></a>2.옵저버 패턴 (Observer Pattern)</h2><h3 id="사용-시점-1"><a href="#사용-시점-1" class="headerlink" title="사용 시점"></a>사용 시점</h3><ul><li><strong>한 객체의 상태 변화를 다른 객체들에게 알려야</strong> 할 때<ul><li>예: 결제 상태 변경 알림</li><li>예: 이벤트 처리 시스템 (버튼 클릭, 키보드 입력)</li><li>예: 실시간 데이터 업데이트 (주식 가격, 날씨 정보)</li><li>예: 사용자 인터페이스 업데이트 (데이터 변경 시 화면 갱신)</li></ul></li></ul><h3 id="구현-예제-1"><a href="#구현-예제-1" class="headerlink" title="구현 예제"></a>구현 예제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 옵저버(Observer) 인터페이스</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Notifier</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_notification</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 알림 방식 구현</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMSNotifier</span>(<span class="title class_ inherited__">Notifier</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_notification</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;📱 SMS: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmailNotifier</span>(<span class="title class_ inherited__">Notifier</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_notification</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;📧 Email: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결제 프로세서 (Subject)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentProcessor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.notifiers = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_notifier</span>(<span class="params">self, notifier: Notifier</span>):</span><br><span class="line">        <span class="variable language_">self</span>.notifiers.append(notifier)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;💳 <span class="subst">&#123;amount&#125;</span>원 결제 완료!&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> notifier <span class="keyword">in</span> <span class="variable language_">self</span>.notifiers:</span><br><span class="line">            notifier.send_notification(<span class="string">f&quot;<span class="subst">&#123;amount&#125;</span>원 결제가 완료되었습니다.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사용 예시</span></span><br><span class="line">payment = PaymentProcessor()</span><br><span class="line">payment.add_notifier(SMSNotifier())</span><br><span class="line">payment.add_notifier(EmailNotifier())</span><br><span class="line">payment.pay(<span class="number">20000</span>)</span><br></pre></td></tr></table></figure><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>각 디자인 패턴은 특정 상황에서 코드의 유지보수성과 확장성을 높이는 데 도움을 줍니다. 실제 프로젝트에서는 이러한 패턴들을 적절히 조합하여 사용하는 것이 중요합니다.</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/design-pattern/">design-pattern</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2025/06/01/design-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kafka 설치해보기</title>
      <link>https://hyunsuk2.github.io/2024/11/17/kafka/</link>
      <guid>https://hyunsuk2.github.io/2024/11/17/kafka/</guid>
      <pubDate>Sun, 17 Nov 2024 13:36:13 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker 카프카 RKaft 모드(no zookeepler) server 만들기&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;과정&quot;&gt;&lt;a href=&quot;#과정&quot; class=&quot;headerlink&quot; title=&quot;과정&quot;&gt;&lt;/a&gt;과정&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;윈도우 wsl 우분투 설치&lt;/li&gt;
&lt;li&gt;카프카 docker pull 하기&lt;/li&gt;
&lt;li&gt;카프카 실행시키기&lt;/li&gt;
&lt;li&gt;메세지 보내보기&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;윈도우에-리눅스-설치&quot;&gt;&lt;a href=&quot;#윈도우에-리눅스-설치&quot; class=&quot;headerlink&quot; title=&quot;윈도우에 리눅스 설치&quot;&gt;&lt;/a&gt;윈도우에 리눅스 설치&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;윈도우 기능 켜기 끄기에서 linux용 하위 시스템 활성화&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;wsl -l -o 입력하여 설치 가능한 배포 확인&lt;/li&gt;
&lt;li&gt;wsl –install [배포판]으로 설치&lt;/li&gt;
&lt;li&gt;wsl 입력해서 가상 리눅스로 접속&lt;/li&gt;
&lt;/ol&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><blockquote><p>docker 카프카 RKaft 모드(no zookeepler) server 만들기</p></blockquote><h2 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h2><blockquote><ol><li>윈도우 wsl 우분투 설치</li><li>카프카 docker pull 하기</li><li>카프카 실행시키기</li><li>메세지 보내보기</li></ol></blockquote><h2 id="윈도우에-리눅스-설치"><a href="#윈도우에-리눅스-설치" class="headerlink" title="윈도우에 리눅스 설치"></a>윈도우에 리눅스 설치</h2><blockquote><ol start="0"><li>윈도우 기능 켜기 끄기에서 linux용 하위 시스템 활성화</li></ol></blockquote><ol><li>wsl -l -o 입력하여 설치 가능한 배포 확인</li><li>wsl –install [배포판]으로 설치</li><li>wsl 입력해서 가상 리눅스로 접속</li></ol><span id="more"></span><h2 id="카프카-설치"><a href="#카프카-설치" class="headerlink" title="카프카 설치"></a>카프카 설치</h2><blockquote><ol><li>docker pull bitnami&#x2F;kafka:latest</li><li>docker-compose.yml 설정 파일 생성</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  kafka-server:</span><br><span class="line">    image: bitnami/kafka:3.3.2 <span class="comment"># 해당 이미지 버전에 맞게 입력</span></span><br><span class="line">    container_name: kafka-server</span><br><span class="line">    hostname: kafka-server</span><br><span class="line">      <span class="comment">#network_mode: app-tier</span></span><br><span class="line">    environment:</span><br><span class="line">      - KAFKA_CFG_NODE_ID=0</span><br><span class="line">      - KAFKA_CFG_PROCESS_ROLES=controller,broker</span><br><span class="line">      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093</span><br><span class="line">      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT</span><br><span class="line">      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-server:9093</span><br><span class="line">      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9092:9092&quot;</span>  <span class="comment"># 외부와 통신할 PLAINTEXT 포트</span></span><br><span class="line">      - <span class="string">&quot;9093:9093&quot;</span>  <span class="comment"># 컨트롤러 포트</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /data/kafka-server:/var/lib/kafka/data  <span class="comment"># 데이터 저장소 (필요시 수정)</span></span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  kafka-ui:</span><br><span class="line">    image: provectuslabs/kafka-ui</span><br><span class="line">    container_name: kafka-ui</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_CLUSTERS_0_NAME: <span class="variable">$&#123;PROFILE:-local&#125;</span>  <span class="comment"># Kafka 클러스터 이름 설정</span></span><br><span class="line">      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-server:9092  <span class="comment"># `kafka-server` 서비스에 연결</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - kafka-server  <span class="comment"># `kafka-server` 컨테이너가 실행된 후 `kafka-ui` 실행</span></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>docker-compose up -d 입력 (도커 컨테이너 생성)</li></ol></blockquote><h2 id="메세지-테스트"><a href="#메세지-테스트" class="headerlink" title="메세지 테스트"></a>메세지 테스트</h2><blockquote><ol><li>docker exec -it kafka-server bash 입력  (도커 컨테이너 접속)</li><li>kafka-topics.sh –bootstrap-server localhost:9092 –create –topic test –partitions 1 –replication-factor 1 입력 (토픽 생성)</li><li>kafka-console-producer.sh –broker-list localhost:9092 –topic test (메세지 보내보기)</li><li><a href="http://localhost:8080/ui/clusters/local/all-topics/test/messages?keySerde=String&valueSerde=String&limit=100">http://localhost:8080/ui/clusters/local/all-topics/test/messages?keySerde=String&amp;valueSerde=String&amp;limit=100</a> (메세지 확인)</li></ol></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://medium.com/mo-zza/kafka-kraft-%EB%AA%A8%EB%93%9C-with-docker-%EB%8F%99%EB%AC%BC%EC%9B%90%EC%9D%84-%ED%83%88%EC%B6%9C%ED%95%9C-kafka-8b5e7c7632fa">https://medium.com/mo-zza/kafka-kraft-%EB%AA%A8%EB%93%9C-with-docker-%EB%8F%99%EB%AC%BC%EC%9B%90%EC%9D%84-%ED%83%88%EC%B6%9C%ED%95%9C-kafka-8b5e7c7632fa</a></li><li><a href="https://hub.docker.com/r/bitnami/kafka">https://hub.docker.com/r/bitnami/kafka</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/KAFKA/">KAFKA</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/KAFKA/">KAFKA</category>
      
      <category domain="https://hyunsuk2.github.io/tags/RKRAFT/">RKRAFT</category>
      
      <category domain="https://hyunsuk2.github.io/tags/messate-queue/">messate queue</category>
      
      <category domain="https://hyunsuk2.github.io/tags/kafka-docker/">kafka docker</category>
      
      
      <comments>https://hyunsuk2.github.io/2024/11/17/kafka/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Junit 기능 테스트</title>
      <link>https://hyunsuk2.github.io/2024/10/03/junitest/</link>
      <guid>https://hyunsuk2.github.io/2024/10/03/junitest/</guid>
      <pubDate>Thu, 03 Oct 2024 14:03:04 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;junit 기본 기능 테스트해보기&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;주-사용-어노테이션&quot;&gt;&lt;a href=&quot;#주-사용-어노테이션&quot; class=&quot;headerlink&quot; title=&quot;주 사용 어노테이션&quot;&gt;&lt;/a&gt;주 사용 어노테이션&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;@Test: 테스트 메서드를 나타냅니다. 이 어노테이션이 붙은 메서드는 테스트 프레임워크에 의해 실행&lt;br&gt;@BeforeEach: 각 테스트 메서드가 실행되기 전에 실행. 테스트 초기화 작업에 사용&lt;br&gt;@AfterEach: 각 테스트 메서드가 실행된 후에 실행. 테스트 정리 작업에 사용&lt;br&gt;@BeforeAll: 모든 테스트 메서드가 실행되기 전에 한 번 실행. 주로 클래스 레벨의 초기화 작업에 사용&lt;br&gt;@AfterAll: 모든 테스트 메서드가 실행된 후에 한 번 실행. 주로 클래스 레벨의 정리 작업에 사용&lt;br&gt;@Disabled: 테스트 메서드나 클래스가 실행되지 않음. 주석 처리와 비슷한 역할&lt;br&gt;@DisplayName: 테스트 메서드의 이름을 지정. 테스트 결과 보고서에 표시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;주-사용-펑션들&quot;&gt;&lt;a href=&quot;#주-사용-펑션들&quot; class=&quot;headerlink&quot; title=&quot;주 사용 펑션들&quot;&gt;&lt;/a&gt;주 사용 펑션들&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;assertEquals(expected, actual): 두 값이 같은지 확인&lt;br&gt;assertNotEquals(unexpected, actual): 두 값이 같지 않은지 확인&lt;br&gt;assertTrue(condition): 조건이 참인지 확인&lt;br&gt;assertFalse(condition): 조건이 거짓인지 확인&lt;br&gt;assertNull(object): 객체가 null인지 확인&lt;br&gt;assertNotNull(object): 객체가 null이 아닌지 확인&lt;br&gt;assertThrows(expectedType, executable): 예외가 발생하는지 확인&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><blockquote><p>junit 기본 기능 테스트해보기</p></blockquote><hr><h2 id="주-사용-어노테이션"><a href="#주-사용-어노테이션" class="headerlink" title="주 사용 어노테이션"></a>주 사용 어노테이션</h2><blockquote><p>@Test: 테스트 메서드를 나타냅니다. 이 어노테이션이 붙은 메서드는 테스트 프레임워크에 의해 실행<br>@BeforeEach: 각 테스트 메서드가 실행되기 전에 실행. 테스트 초기화 작업에 사용<br>@AfterEach: 각 테스트 메서드가 실행된 후에 실행. 테스트 정리 작업에 사용<br>@BeforeAll: 모든 테스트 메서드가 실행되기 전에 한 번 실행. 주로 클래스 레벨의 초기화 작업에 사용<br>@AfterAll: 모든 테스트 메서드가 실행된 후에 한 번 실행. 주로 클래스 레벨의 정리 작업에 사용<br>@Disabled: 테스트 메서드나 클래스가 실행되지 않음. 주석 처리와 비슷한 역할<br>@DisplayName: 테스트 메서드의 이름을 지정. 테스트 결과 보고서에 표시</p></blockquote><hr><h2 id="주-사용-펑션들"><a href="#주-사용-펑션들" class="headerlink" title="주 사용 펑션들"></a>주 사용 펑션들</h2><blockquote><p>assertEquals(expected, actual): 두 값이 같은지 확인<br>assertNotEquals(unexpected, actual): 두 값이 같지 않은지 확인<br>assertTrue(condition): 조건이 참인지 확인<br>assertFalse(condition): 조건이 거짓인지 확인<br>assertNull(object): 객체가 null인지 확인<br>assertNotNull(object): 객체가 null이 아닌지 확인<br>assertThrows(expectedType, executable): 예외가 발생하는지 확인</p></blockquote><span id="more"></span><hr><h2 id="계산-클래스"><a href="#계산-클래스" class="headerlink" title="계산 클래스"></a>계산 클래스</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="계산기-테스트-예시-코드"><a href="#계산기-테스트-예시-코드" class="headerlink" title="계산기 테스트 예시 코드"></a>계산기 테스트 예시 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setupAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before all tests&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before each test&quot;</span>);</span><br><span class="line">        calculator = <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAddition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">2</span>, result, <span class="string">&quot;1 + 1 should equal 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSubtraction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calculator.subtract(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">1</span>, result, <span class="string">&quot;2 - 1 should equal 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;After each test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tearDownAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;After all tests&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><blockquote><p>IDE에서 test result 가 정상 처리 된 것을 확인<br> debug 콘솔에는 아래 출력을 확인<br>Before all tests<br>Before each test<br>After each test<br>Before each test<br>After each test<br>After all tests</p></blockquote><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><blockquote><p>테스트 코드를 작성해야 나중에 유지보수 하기 좋고 생산성 좋다고 한다<br>처음엔 테스트 코드 작성하기가 귀찮겠지만 기능을 추가할 때나 새로 코드를 짜야할 때<br>테스트 코드부터 짜는 습관을 들여 테스트 주도 개발 이점을 느껴보자</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/JAVA/">JAVA</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/java/">java</category>
      
      <category domain="https://hyunsuk2.github.io/tags/junit/">junit</category>
      
      <category domain="https://hyunsuk2.github.io/tags/test/">test</category>
      
      
      <comments>https://hyunsuk2.github.io/2024/10/03/junitest/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 가상쓰레드 속도 비교</title>
      <link>https://hyunsuk2.github.io/2024/09/29/thread/</link>
      <guid>https://hyunsuk2.github.io/2024/09/29/thread/</guid>
      <pubDate>Sun, 29 Sep 2024 13:20:36 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;일반 thread 와 가상 thread 속도 비교하기(IO작업)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;일반-thread-코드&quot;&gt;&lt;a href=&quot;#일반-thread-코드&quot; class=&quot;headerlink&quot; title=&quot;일반 thread 코드&quot;&gt;&lt;/a&gt;일반 thread 코드&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.URI;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.http.HttpClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.http.HttpRequest;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.http.HttpResponse;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.time.Duration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.time.Instant;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.CompletableFuture;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Executors;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.TimeUnit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;PlatformThreadTest&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; HttpClient.newHttpClient();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; HttpRequest.newBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .uri(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;URI&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;http://localhost:4000/&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;totalRequests&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;batchSize&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;numBatches&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; totalRequests / batchSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; Instant.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; batch &amp;lt; numBatches; batch++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;executor&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(batchSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CompletableFuture&amp;lt;?&amp;gt;[] futures = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CompletableFuture&lt;/span&gt;&amp;lt;?&amp;gt;[batchSize];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; batchSize; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                futures[i] = CompletableFuture.runAsync(() -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        HttpResponse&amp;lt;String&amp;gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;// System.out.println(&amp;quot;Response code: &amp;quot; + response.statusCode());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;, executor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CompletableFuture.allOf(futures).join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            executor.awaitTermination(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, TimeUnit.MINUTES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; Instant.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Time taken with platform threads: &amp;quot;&lt;/span&gt; + Duration.between(start, end).toMillis() + &lt;span class=&quot;string&quot;&gt;&amp;quot; ms&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><blockquote><p>일반 thread 와 가상 thread 속도 비교하기(IO작업)</p></blockquote><h2 id="일반-thread-코드"><a href="#일반-thread-코드" class="headerlink" title="일반 thread 코드"></a>일반 thread 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpClient;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlatformThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">client</span> <span class="operator">=</span> HttpClient.newHttpClient();</span><br><span class="line">        <span class="type">var</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder()</span><br><span class="line">                .uri(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;http://localhost:4000/&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalRequests</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numBatches</span> <span class="operator">=</span> totalRequests / batchSize;</span><br><span class="line"></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">batch</span> <span class="operator">=</span> <span class="number">0</span>; batch &lt; numBatches; batch++) &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(batchSize);</span><br><span class="line">            CompletableFuture&lt;?&gt;[] futures = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;?&gt;[batchSize];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; batchSize; i++) &#123;</span><br><span class="line">                futures[i] = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line">                        <span class="comment">// System.out.println(&quot;Response code: &quot; + response.statusCode());</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, executor);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            CompletableFuture.allOf(futures).join();</span><br><span class="line">            executor.shutdown();</span><br><span class="line">            executor.awaitTermination(<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">end</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Time taken with platform threads: &quot;</span> + Duration.between(start, end).toMillis() + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><hr><h2 id="가상-thread-코드"><a href="#가상-thread-코드" class="headerlink" title="가상 thread 코드"></a>가상 thread 코드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpClient;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">client</span> <span class="operator">=</span> HttpClient.newHttpClient();</span><br><span class="line">        <span class="type">var</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder()</span><br><span class="line">                .uri(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;http://localhost:4000/&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalRequests</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numBatches</span> <span class="operator">=</span> totalRequests / batchSize;</span><br><span class="line"></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">batch</span> <span class="operator">=</span> <span class="number">0</span>; batch &lt; numBatches; batch++) &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line">            CompletableFuture&lt;?&gt;[] futures = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;?&gt;[batchSize];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; batchSize; i++) &#123;</span><br><span class="line">                futures[i] = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line">                        <span class="comment">// System.out.println(&quot;Response code: &quot; + response.statusCode());</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, executor);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            CompletableFuture.allOf(futures).join();</span><br><span class="line">            executor.shutdown();</span><br><span class="line">            executor.awaitTermination(<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">end</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Time taken with virtual threads: &quot;</span> + Duration.between(start, end).toMillis() + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="server-코드"><a href="#server-코드" class="headerlink" title="server 코드"></a>server 코드</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">4000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;Hello, World!\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><ul><li>client 10만 request 결과 <ul><li>일반 thread 12초 </li><li>가상 thread 6초</li></ul></li></ul><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><hr><blockquote><p>일반, 가상 쓰레드로 각각 10만번 요청했을 때 6, 12초가 걸렸다.<br>cpu 연산에서는 차이가 없겠지만 IO 작업이 주 일때는 가상 쓰레드를 이용하자</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/JAVA/">JAVA</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/thread/">thread</category>
      
      <category domain="https://hyunsuk2.github.io/tags/virtual-thread/">virtual thread</category>
      
      <category domain="https://hyunsuk2.github.io/tags/java21/">java21</category>
      
      
      <comments>https://hyunsuk2.github.io/2024/09/29/thread/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Sqlalchemy Pool_recycle 설정</title>
      <link>https://hyunsuk2.github.io/2024/06/29/mysql-db-timeout/</link>
      <guid>https://hyunsuk2.github.io/2024/06/29/mysql-db-timeout/</guid>
      <pubDate>Sat, 29 Jun 2024 07:43:41 GMT</pubDate>
      
      <description>&lt;h4 id=&quot;sqlalchemy-pool-recycle옵션&quot;&gt;&lt;a href=&quot;#sqlalchemy-pool-recycle옵션&quot; class=&quot;headerlink&quot; title=&quot;sqlalchemy pool_recycle옵션&quot;&gt;&lt;/a&gt;&lt;strong&gt;sqlalchemy pool_recycle옵션&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;세팅한 값(초) 후에 db 커넥션 풀을 다시 만든다. 디폴트는 -1&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;언제-세팅해야할까&quot;&gt;&lt;a href=&quot;#언제-세팅해야할까&quot; class=&quot;headerlink&quot; title=&quot;언제 세팅해야할까?&quot;&gt;&lt;/a&gt;&lt;strong&gt;언제 세팅해야할까?&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;mysql 처럼 디폴트로 커넥션 타임 아웃이 있는 db를 사용할 때 설정해줘야 한다 mysql을 사용하는데 pool_recycle 세팅을 안 한하고 배치 같은 작업을 돌린다면 &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2006, &amp;#x27;MySQL server has gone away&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
에러를 보게 될 것이다&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;사용-예시&quot;&gt;&lt;a href=&quot;#사용-예시&quot; class=&quot;headerlink&quot; title=&quot;사용 예시&quot;&gt;&lt;/a&gt;&lt;strong&gt;사용 예시&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;POOL_RECYCLE_TIME = &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;engine = create_engine(&lt;span class=&quot;string&quot;&gt;f&amp;quot;mariadb+pymysql://&lt;span class=&quot;subst&quot;&gt;&amp;#123;user&amp;#125;&lt;/span&gt;:&lt;span class=&quot;subst&quot;&gt;&amp;#123;passwd&amp;#125;&lt;/span&gt;@&lt;span class=&quot;subst&quot;&gt;&amp;#123;host&amp;#125;&lt;/span&gt;:&lt;span class=&quot;subst&quot;&gt;&amp;#123;port&amp;#125;&lt;/span&gt;/&lt;span class=&quot;subst&quot;&gt;&amp;#123;database&amp;#125;&lt;/span&gt;?charset=utf8mb4&amp;quot;&lt;/span&gt;, pool_recycle=POOL_RECYCLE_TIME)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h4 id="sqlalchemy-pool-recycle옵션"><a href="#sqlalchemy-pool-recycle옵션" class="headerlink" title="sqlalchemy pool_recycle옵션"></a><strong>sqlalchemy pool_recycle옵션</strong></h4><ul><li>세팅한 값(초) 후에 db 커넥션 풀을 다시 만든다. 디폴트는 -1</li></ul><h4 id="언제-세팅해야할까"><a href="#언제-세팅해야할까" class="headerlink" title="언제 세팅해야할까?"></a><strong>언제 세팅해야할까?</strong></h4><ul><li>mysql 처럼 디폴트로 커넥션 타임 아웃이 있는 db를 사용할 때 설정해줘야 한다 mysql을 사용하는데 pool_recycle 세팅을 안 한하고 배치 같은 작업을 돌린다면 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2006, &#x27;MySQL server has gone away&#x27;)</span><br></pre></td></tr></table></figure>에러를 보게 될 것이다<br></li></ul><h4 id="사용-예시"><a href="#사용-예시" class="headerlink" title="사용 예시"></a><strong>사용 예시</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POOL_RECYCLE_TIME = <span class="number">60</span> * <span class="number">60</span> * <span class="number">4</span></span><br><span class="line">engine = create_engine(<span class="string">f&quot;mariadb+pymysql://<span class="subst">&#123;user&#125;</span>:<span class="subst">&#123;passwd&#125;</span>@<span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>/<span class="subst">&#123;database&#125;</span>?charset=utf8mb4&quot;</span>, pool_recycle=POOL_RECYCLE_TIME)</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="db-별-디폴트-커넥션-타임-아웃"><a href="#db-별-디폴트-커넥션-타임-아웃" class="headerlink" title="db 별 디폴트 커넥션 타임 아웃"></a>db 별 디폴트 커넥션 타임 아웃</h4><ol><li>MySQL - 8시간 (28800초)</li><li>PostgreSQL - 서버 설정에 따라 다름, 기본적으로는 타임아웃을 설정하지 않음</li><li>SQL Server - 클라이언트 측 설정에 따라 다름, 기본적으로는 <code>remote query timeout</code> 옵션이 600초(10분)</li><li>Oracle - <code>SQLNET.EXPIRE_TIME</code> 설정에 따라 다름, 기본값은 설정되어 있지 않음</li><li>SQLite - 연결 타임아웃에 대한 기본 설정은 없음</li><li>MongoDB - 10분 (600000ms), <code>net.timeout</code> 설정에 따라 다름</li></ol><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><ul><li><a href="https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine.params.pool_recycle">https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine.params.pool_recycle</a></li><li><a href="https://docs.sqlalchemy.org/en/13/core/pooling.html#pool-setting-recycle">https://docs.sqlalchemy.org/en/13/core/pooling.html#pool-setting-recycle</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/python/">python</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/mysql-timeout/">mysql timeout</category>
      
      <category domain="https://hyunsuk2.github.io/tags/sqlalchemy/">sqlalchemy</category>
      
      <category domain="https://hyunsuk2.github.io/tags/pool-recycle/">pool_recycle</category>
      
      <category domain="https://hyunsuk2.github.io/tags/MySQL-server-has-gone-away/">MySQL server has gone away</category>
      
      <category domain="https://hyunsuk2.github.io/tags/pyhton/">pyhton</category>
      
      
      <comments>https://hyunsuk2.github.io/2024/06/29/mysql-db-timeout/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git 설정과 자주 쓰는 명령어</title>
      <link>https://hyunsuk2.github.io/2023/12/22/git-command/</link>
      <guid>https://hyunsuk2.github.io/2023/12/22/git-command/</guid>
      <pubDate>Fri, 22 Dec 2023 06:02:39 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;git-세팅&quot;&gt;&lt;a href=&quot;#git-세팅&quot; class=&quot;headerlink&quot; title=&quot;git 세팅&quot;&gt;&lt;/a&gt;git 세팅&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;이름-세팅&quot;&gt;&lt;a href=&quot;#이름-세팅&quot; class=&quot;headerlink&quot; title=&quot;이름 세팅&quot;&gt;&lt;/a&gt;이름 세팅&lt;/h4&gt;&lt;ul&gt;
git config --global user.name &quot;Your Name&quot;

&lt;p&gt;ex) 이름 세팅&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&amp;quot;hyunsuk&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="git-세팅"><a href="#git-세팅" class="headerlink" title="git 세팅"></a>git 세팅</h2><hr><h4 id="이름-세팅"><a href="#이름-세팅" class="headerlink" title="이름 세팅"></a>이름 세팅</h4><ul>git config --global user.name "Your Name"<p>ex) 이름 세팅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;hyunsuk&quot;</span></span><br></pre></td></tr></table></figure></ul><span id="more"></span><h4 id="이메일-세팅"><a href="#이메일-세팅" class="headerlink" title="이메일 세팅"></a>이메일 세팅</h4><ul>git config --global user.email you@example.com<p>ex) 이메일 세팅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email ohs11244@naver.com</span><br></pre></td></tr></table></figure></ul> <h2 id="git-자주-쓰는-명령어"><a href="#git-자주-쓰는-명령어" class="headerlink" title="git 자주 쓰는 명령어"></a>git 자주 쓰는 명령어</h2><hr><p>git pull</p><ul>원격 저장소 파일과 동기화 시키기</ul>git status<ul>신규, 변경 파일 상태 확인 명령어</ul>git log<ul>작업 이력 확인</ul>git checkout -b [branch_name]<ul>신규 branch를 만들고 해당 branch로 변경<p>ex) 새로 생성한 모든 파일 스테이징 상태로 만들기</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add ./* </span><br></pre></td></tr></table></figure></ul><p>git add [대상]</p><ul>신규 생성 파일 스테이징 상태(commit 할 수 았는 상태)로 만들어 줌<p>ex) 새로 생성한 모든 파일 스테이징 상태로 만들기</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add ./* </span><br></pre></td></tr></table></figure></ul><p>git commit -m “메세지 등록”</p><ul>파일들 원격으로 올리기(push) 하기 전 메세지 등록<p>ex) 원격 올리기 전 메세지 등록</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;write message&quot;</span> </span><br></pre></td></tr></table></figure></ul><p>git push origin [branch name]</p><ul>[branch name]을 origin(원격 저장소 url) 로 업로드<p>ex) 원격 저장로 업로드</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure></ul><p>git stash</p><ul>최근 commit 시점에서부터 변경된 사항들을 백업하고 최근 commit 상태로 돌려 줌</ul><p>git stash pop</p><ul>git stash로 백업한 부분을 꺼내와 현재 파일과 합침</ul><p>git remote -v</p><ul>git 원격 저장소 url 주소 확인</ul><p>git remote add [원격 저장소 별칭] [url]</p><ul>원격 저장소 주소를 별칭으로 세팅함<p>ex) 원격 저장소 주소 세팅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:HYUNSUK2/hyunsuk2.github.io.git</span><br></pre></td></tr></table></figure></ul>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/git/">git</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/git/">git</category>
      
      <category domain="https://hyunsuk2.github.io/tags/git-command/">git command</category>
      
      <category domain="https://hyunsuk2.github.io/tags/git-setting/">git setting</category>
      
      <category domain="https://hyunsuk2.github.io/tags/git-%EC%9E%90%EC%A3%BC-%EC%93%B0%EB%8A%94-%EB%AA%85%EB%A0%B9%EC%96%B4/">git 자주 쓰는 명령어</category>
      
      
      <comments>https://hyunsuk2.github.io/2023/12/22/git-command/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Zeromq 기본 개념</title>
      <link>https://hyunsuk2.github.io/2022/09/22/zmq/</link>
      <guid>https://hyunsuk2.github.io/2022/09/22/zmq/</guid>
      <pubDate>Thu, 22 Sep 2022 11:41:45 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;zeromq-정리-1&quot;&gt;&lt;a href=&quot;#zeromq-정리-1&quot; class=&quot;headerlink&quot; title=&quot;zeromq 정리 1&quot;&gt;&lt;/a&gt;zeromq 정리 1&lt;/h2&gt;&lt;p&gt;zeromq 개인 공부로 zmq 공식 문서 보고 필요한거 정리한 내용&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ref &lt;a href=&quot;https://zguide.zeromq.org/docs/&quot;&gt;https://zguide.zeromq.org/docs/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="zeromq-정리-1"><a href="#zeromq-정리-1" class="headerlink" title="zeromq 정리 1"></a>zeromq 정리 1</h2><p>zeromq 개인 공부로 zmq 공식 문서 보고 필요한거 정리한 내용</p><blockquote><p>ref <a href="https://zguide.zeromq.org/docs/">https://zguide.zeromq.org/docs/</a></p></blockquote><span id="more"></span><h2 id="zeromq-특징"><a href="#zeromq-특징" class="headerlink" title="zeromq 특징"></a>zeromq 특징</h2><ol><li>빠르다</li><li>여러 소켓 조합으로 방대한 네트워크 조합을 만들 수 있다</li><li>가볍다</li><li>유연하다</li></ol><ul><li>패턴</li></ul><ol><li><p>request-reply<br>클라이언트와 서비스의 집합을 연결하는 패턴<br>이것은 원격 프로시저 호출 및 작업 분산의 패턴</p></li><li><p>publish-subscribe<br> publisher와 subscribe의 집합을 연결하는 패턴, 이것은 데이터 분산 패턴</p></li><li><p>pipeline<br> 여러 단계와 루프를 가질 수 있는 fan-out &#x2F; fan-in 패턴으로 노드를 연결<br> 이것은 병렬 작업 분산 및 수집 패턴</p></li><li><p>exclusive pair<br> 독점 쌍의 두 소켓을 연결하는 패턴<br> 이것은 특정 고급적인 낮은 수준의 패턴</p></li></ol><ul><li>유효 소켓 조합</li></ul><ol><li>PUB and SUB</li><li>REQ and REP</li><li>REQ and ROUTER</li><li>DEALER and REP</li><li>DEALER and ROUTER</li><li>DEALER and DEALER</li><li>ROUTER and ROUTER</li><li>PUSH and PULL</li><li>PAIR and PAIR</li></ol><ul><li>연결 방법</li></ul><ol><li>inproc<br>한 프로세스에서 스레드를 연결하기 위한 가장 빠른 방법</li><li>ipc</li><li>tcp</li><li>pgm</li><li>epgm</li></ol><ul><li>socket 조합 참고</li></ul><ol><li>한 코어에 여러 프로세스보다 여러 코어에 한 프로세스로 시작하는 게 좋음, 또한 스레드로 worker를 실행하면<br>네트워크 홉, 지연 시간 및 네트워크 트래픽이 없음</li></ol>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/zeromq/">zeromq</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/zeromq/">zeromq</category>
      
      <category domain="https://hyunsuk2.github.io/tags/message-queue/">message queue</category>
      
      <category domain="https://hyunsuk2.github.io/tags/network-communication/">network communication</category>
      
      <category domain="https://hyunsuk2.github.io/tags/zmq/">zmq</category>
      
      
      <comments>https://hyunsuk2.github.io/2022/09/22/zmq/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>예시로 알아보는 Python Heap Memory</title>
      <link>https://hyunsuk2.github.io/2021/02/27/python-heap-memory/</link>
      <guid>https://hyunsuk2.github.io/2021/02/27/python-heap-memory/</guid>
      <pubDate>Sat, 27 Feb 2021 06:47:51 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;프로세스-메모리는-크게-code-data-stack-heap-영역이-있는데-이번-글에서는-stack-heap-영역을-다룰-예정이다&quot;&gt;&lt;a href=&quot;#프로세스-메모리는-크게-code-data-stack-heap-영역이-있는데-이번-글에서</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="프로세스-메모리는-크게-code-data-stack-heap-영역이-있는데-이번-글에서는-stack-heap-영역을-다룰-예정이다"><a href="#프로세스-메모리는-크게-code-data-stack-heap-영역이-있는데-이번-글에서는-stack-heap-영역을-다룰-예정이다" class="headerlink" title="프로세스 메모리는 크게 code, data, stack, heap 영역이 있는데 이번 글에서는 stack, heap 영역을 다룰 예정이다"></a>프로세스 메모리는 크게 code, data, stack, heap 영역이 있는데 이번 글에서는 stack, heap 영역을 다룰 예정이다</h3><h4 id="그럼-heap-영역은-왜-알아야-할까"><a href="#그럼-heap-영역은-왜-알아야-할까" class="headerlink" title="그럼 heap 영역은 왜 알아야 할까?"></a>그럼 heap 영역은 왜 알아야 할까?</h4><ol><li>파이썬은 모든 게 객체이기 때문, 즉 값을 heap에 저장하고 stack에서 참조한다</li><li>모든 thread는 자기 process heap memory 영역을 공유한다 이걸 이용해서 좀 더 유연한 프로세스를 만들 수 있다</li><li>객체를 무분별하게 생성하지 않기 위해서</li><li>버그를 찾기 위해</li><li>기타 등등…</li></ol><h4 id="간단하게-예시를-들면"><a href="#간단하게-예시를-들면" class="headerlink" title="간단하게 예시를 들면"></a>간단하게 예시를 들면</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">detect_word = <span class="string">&#x27;dog&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 문장에 탐지 단어가 있는지 확인하는 함수</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_worker</span>():</span><br><span class="line">    <span class="keyword">global</span> detect_word</span><br><span class="line">    text = <span class="string">&#x27;dogs are cute&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        check = detect_word <span class="keyword">in</span> text</span><br><span class="line">        <span class="built_in">print</span>(check)</span><br><span class="line">        <span class="keyword">if</span> check <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 탐지 단어를 바꾸는 함수</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_worker</span>():</span><br><span class="line">    <span class="keyword">global</span> detect_word</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    detect_word = <span class="string">&#x27;cat&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tread1 = Thread(target=print_worker)</span><br><span class="line">tread1.start()</span><br><span class="line"></span><br><span class="line">tread2 = Thread(target=change_worker)</span><br><span class="line">tread2.start()</span><br></pre></td></tr></table></figure><pre><code>실행 결과는 TrueTrueTrueFalse</code></pre><blockquote><p>heap 메모리 그림을 보면 프로세스 실행 3초 뒤<br>thread2가 detect_word를 cat으로 바꾸었기 때문에<br>heap 메모리를 공유하는 thread1의 detect_word도 cat을 가리키고 있다<br>dog는 reference counting이 0이 되어 GC에 의해 메모리 해제된다</p></blockquote><img src="/2021/02/27/python-heap-memory/thread-heap.PNG" class=""><blockquote><p>간단한 예시지만 이런 특징을 사용해서 좀 더 유연한 프로그램을 만들 수 있다<br>thread 프로그래밍이 장점이 많지만 메모리를 공유하기 때문에 <strong>연산 작업할 때는 lock을 사용하여 thread-safe</strong>하게 신경 써야 한다<br>하지만 <strong>lock은 처리 시간을 느리게 하므로</strong> 주의가 필요하다 </p></blockquote>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/python/">python</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/python/">python</category>
      
      <category domain="https://hyunsuk2.github.io/tags/memory/">memory</category>
      
      <category domain="https://hyunsuk2.github.io/tags/heap/">heap</category>
      
      
      <comments>https://hyunsuk2.github.io/2021/02/27/python-heap-memory/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>자료구조 시간 복잡도</title>
      <link>https://hyunsuk2.github.io/2021/02/26/data-structure-timecomplexity/</link>
      <guid>https://hyunsuk2.github.io/2021/02/26/data-structure-timecomplexity/</guid>
      <pubDate>Fri, 26 Feb 2021 14:17:06 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;자료구조별-시간-복잡도&quot;&gt;&lt;a href=&quot;#자료구조별-시간-복잡도&quot; class=&quot;headerlink&quot; title=&quot;자료구조별 시간 복잡도&quot;&gt;&lt;/a&gt;자료구조별 시간 복잡도&lt;/h2&gt;&lt;h4 id=&quot;실무에서-주로-사용했던-자료구조-시간복잡도를-</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="자료구조별-시간-복잡도"><a href="#자료구조별-시간-복잡도" class="headerlink" title="자료구조별 시간 복잡도"></a>자료구조별 시간 복잡도</h2><h4 id="실무에서-주로-사용했던-자료구조-시간복잡도를-정리해봤다-작업의-시간복잡도를-보고-효율적인-자료구조를-선택하자"><a href="#실무에서-주로-사용했던-자료구조-시간복잡도를-정리해봤다-작업의-시간복잡도를-보고-효율적인-자료구조를-선택하자" class="headerlink" title="실무에서 주로 사용했던 자료구조 시간복잡도를 정리해봤다 작업의 시간복잡도를 보고 효율적인 자료구조를 선택하자"></a>실무에서 주로 사용했던 자료구조 시간복잡도를 정리해봤다 작업의 시간복잡도를 보고 효율적인 자료구조를 선택하자</h4><table><thead><tr><th>자료구조</th><th>접근</th><th>검색</th><th>입력</th><th>삭제</th></tr></thead><tbody><tr><td>array list</td><td>O(1)</td><td>O(n)</td><td>O(n)</td><td>O(n)</td></tr><tr><td>set</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>stack</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>queue</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>singled-linked list</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>doubly-linked list</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>hash table</td><td>N&#x2F;A</td><td>O(log(n))</td><td>O(log(n)</td><td>O(log(n)</td></tr><tr><td>binary tree</td><td>O(log(n))</td><td>O(log(n))</td><td>O(log(n))</td><td>O(log(n))</td></tr></tbody></table><blockquote><p>습관적으로 탐색할 때도 list를 많이 사용했는데 탐색할 때는 list 대신 set을 사용하자</p></blockquote><h2 id="시간-복잡도-그래프"><a href="#시간-복잡도-그래프" class="headerlink" title="시간 복잡도 그래프"></a>시간 복잡도 그래프</h2><img src="/2021/02/26/data-structure-timecomplexity/time%20complexity.PNG" class=""><h4 id="참조링크"><a href="#참조링크" class="headerlink" title="참조링크"></a>참조링크</h4><ol><li><a href="https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt">파이썬 자료구조 시간복잡도</a></li><li><a href="https://www.bigocheatsheet.com/">자료구조 시간복잡도</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/data-structure/">data structure</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/data-structure/">data structure</category>
      
      <category domain="https://hyunsuk2.github.io/tags/list/">list</category>
      
      <category domain="https://hyunsuk2.github.io/tags/stack/">stack</category>
      
      <category domain="https://hyunsuk2.github.io/tags/queue/">queue</category>
      
      <category domain="https://hyunsuk2.github.io/tags/hash-table/">hash table</category>
      
      <category domain="https://hyunsuk2.github.io/tags/binary-tree/">binary tree</category>
      
      
      <comments>https://hyunsuk2.github.io/2021/02/26/data-structure-timecomplexity/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 병렬처리로 크롤링 시간 단축하기</title>
      <link>https://hyunsuk2.github.io/2021/02/26/python-crawling-thread-async/</link>
      <guid>https://hyunsuk2.github.io/2021/02/26/python-crawling-thread-async/</guid>
      <pubDate>Fri, 26 Feb 2021 00:51:06 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;thread-와-concurrent-futures-사용으로-병렬-처리하기&quot;&gt;&lt;a href=&quot;#thread-와-concurrent-futures-사용으로-병렬-처리하기&quot; class=&quot;headerlink&quot; title=&quot;thread 와 concurrent.futures 사용으로 병렬 처리하기&quot;&gt;&lt;/a&gt;thread 와 concurrent.futures 사용으로 병렬 처리하기&lt;/h2&gt;&lt;h3 id=&quot;1-thread-사용으로-병렬-처리&quot;&gt;&lt;a href=&quot;#1-thread-사용으로-병렬-처리&quot; class=&quot;headerlink&quot; title=&quot;1. thread 사용으로 병렬 처리&quot;&gt;&lt;/a&gt;1. thread 사용으로 병렬 처리&lt;/h3&gt;&lt;h4 id=&quot;저번-코드에서-save-img-함수를-multi-thread로-실행하면-좀-더-빠른-결과물을-얻을-수-있을-것-같다&quot;&gt;&lt;a href=&quot;#저번-코드에서-save-img-함수를-multi-thread로-실행하면-좀-더-빠른-결과물을-얻을-수-있을-것-같다&quot; class=&quot;headerlink&quot; title=&quot;저번 코드에서 save_img 함수를 multi thread로 실행하면 좀 더 빠른 결과물을 얻을 수 있을 것 같다&quot;&gt;&lt;/a&gt;저번 코드에서 save_img 함수를 multi thread로 실행하면 좀 더 빠른 결과물을 얻을 수 있을 것 같다&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t1 = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reg = re.&lt;span class=&quot;built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;oimgurl: &amp;quot;.&amp;#123;0,300&amp;#125;&amp;quot;, cpid&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&amp;#x27;https://search.daum.net/search?w=img&amp;amp;nil_search=btn&amp;amp;DA=NTB&amp;amp;enc=utf8&amp;amp;q=%EA%B0%95%EC%95%84%EC%A7%80&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html = requests.get(url=url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html_raw_data = &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(html.content)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reg_iter = reg.finditer(html_raw_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;thread_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;save_img&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;idx, img_url&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res = requests.get(img_url).content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;f&amp;#x27;&lt;span class=&quot;subst&quot;&gt;&amp;#123;idx&amp;#125;&lt;/span&gt;.jpg&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;wb&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f.write(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;f&amp;#x27;save &lt;span class=&quot;subst&quot;&gt;&amp;#123;idx&amp;#125;&lt;/span&gt;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; idx, res_data &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;enumerate&lt;/span&gt;(reg_iter):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img_url = res_data.group().split(&lt;span class=&quot;string&quot;&gt;&amp;#x27;oimgurl:&amp;#x27;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].split(&lt;span class=&quot;string&quot;&gt;&amp;#x27;, cpid&amp;#x27;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].replace(&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;quot;&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_worker = threading.Thread(target=save_img, args=(idx, img_url))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_worker.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_list.append(thread_worker)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; thread &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; thread_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t2 = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(t2-t1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;작업결과&lt;/p&gt;
&lt;img src=&quot;/2021/02/26/python-crawling-thread-async/result.PNG&quot; class=&quot;&quot;&gt;
&lt;h5 id=&quot;작업-시간이-1초대로-단축된-걸-확인-할-수-있다&quot;&gt;&lt;a href=&quot;#작업-시간이-1초대로-단축된-걸-확인-할-수-있다&quot; class=&quot;headerlink&quot; title=&quot;작업 시간이 1초대로 단축된 걸 확인 할 수 있다&quot;&gt;&lt;/a&gt;작업 시간이 1초대로 단축된 걸 확인 할 수 있다&lt;/h5&gt;&lt;h3 id=&quot;2-concurrent-futures-사용으로-병렬-처리하기&quot;&gt;&lt;a href=&quot;#2-concurrent-futures-사용으로-병렬-처리하기&quot; class=&quot;headerlink&quot; title=&quot;2. concurrent.futures 사용으로 병렬 처리하기&quot;&gt;&lt;/a&gt;2. concurrent.futures 사용으로 병렬 처리하기&lt;/h3&gt;&lt;h4 id=&quot;concurrent-futures는-비동기-처리-고수준-인터페이스-모듈이다-이-모듈을-써서-작업-시간을-줄여보자&quot;&gt;&lt;a href=&quot;#concurrent-futures는-비동기-처리-고수준-인터페이스-모듈이다-이-모듈을-써서-작업-시간을-줄여보자&quot; class=&quot;headerlink&quot; title=&quot;concurrent.futures는 비동기 처리 고수준 인터페이스 모듈이다 이 모듈을 써서 작업 시간을 줄여보자&quot;&gt;&lt;/a&gt;concurrent.futures는 비동기 처리 고수준 인터페이스 모듈이다 이 모듈을 써서 작업 시간을 줄여보자&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; concurrent.futures &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ThreadPoolExecutor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t1 = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reg = re.&lt;span class=&quot;built_in&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;oimgurl: &amp;quot;.&amp;#123;0,300&amp;#125;&amp;quot;, cpid&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&amp;#x27;https://search.daum.net/search?w=img&amp;amp;nil_search=btn&amp;amp;DA=NTB&amp;amp;enc=utf8&amp;amp;q=%EA%B0%95%EC%95%84%EC%A7%80&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html = requests.get(url=url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html_raw_data = &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(html.content)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reg_iter = reg.finditer(html_raw_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;thread_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#url 이미지를 저장하는 함수&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;save_img&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;idx, img_url&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res = requests.get(img_url).content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;f&amp;#x27;&lt;span class=&quot;subst&quot;&gt;&amp;#123;idx&amp;#125;&lt;/span&gt;.jpg&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;wb&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 이미지 관련 작업은 pillow 모듈을 사용하는게 좋다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 예제에서는 사용 안함 (따로 설치가 필요)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f.write(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;f&amp;#x27;save &lt;span class=&quot;subst&quot;&gt;&amp;#123;idx&amp;#125;&lt;/span&gt;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; ThreadPoolExecutor(max_workers=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; executor:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; idx, res_data &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;enumerate&lt;/span&gt;(reg_iter):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# url 을 뽑아내는 전처리 작업&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img_url = res_data.group().split(&lt;span class=&quot;string&quot;&gt;&amp;#x27;oimgurl:&amp;#x27;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].split(&lt;span class=&quot;string&quot;&gt;&amp;#x27;, cpid&amp;#x27;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].replace(&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;quot;&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        executor.submit(save_img, idx, img_url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t2 = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(t2 - t1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;작업결과&lt;/p&gt;
&lt;img src=&quot;/2021/02/26/python-crawling-thread-async/dog2.PNG&quot; class=&quot;&quot;&gt;


&lt;h5 id=&quot;마찬가지로-작업-시간이-1초대로-단축된-걸-확인-할-수-있다&quot;&gt;&lt;a href=&quot;#마찬가지로-작업-시간이-1초대로-단축된-걸-확인-할-수-있다&quot; class=&quot;headerlink&quot; title=&quot;마찬가지로 작업 시간이 1초대로 단축된 걸 확인 할 수 있다&quot;&gt;&lt;/a&gt;마찬가지로 작업 시간이 1초대로 단축된 걸 확인 할 수 있다&lt;/h5&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;결론&quot;&gt;&lt;a href=&quot;#결론&quot; class=&quot;headerlink&quot; title=&quot;결론&quot;&gt;&lt;/a&gt;결론&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;I&amp;#x2F;O 작업이 있을 때 병렬 처리 작업을 활용하여 작업 시간을 단축시킬수 있다&lt;/li&gt;
&lt;li&gt;상황에 따라 다르지만 될 수 있으면 thread 모듈보단 고수준 비동기 concurrent.futures 모듈을 사용하자 병렬처리 작업의 결과물을 리턴 받는 등 다양한 함수를 제공한다 &lt;a href=&quot;https://docs.python.org/ko/3/library/concurrent.futures.html&quot;&gt;참조링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="thread-와-concurrent-futures-사용으로-병렬-처리하기"><a href="#thread-와-concurrent-futures-사용으로-병렬-처리하기" class="headerlink" title="thread 와 concurrent.futures 사용으로 병렬 처리하기"></a>thread 와 concurrent.futures 사용으로 병렬 처리하기</h2><h3 id="1-thread-사용으로-병렬-처리"><a href="#1-thread-사용으로-병렬-처리" class="headerlink" title="1. thread 사용으로 병렬 처리"></a>1. thread 사용으로 병렬 처리</h3><h4 id="저번-코드에서-save-img-함수를-multi-thread로-실행하면-좀-더-빠른-결과물을-얻을-수-있을-것-같다"><a href="#저번-코드에서-save-img-함수를-multi-thread로-실행하면-좀-더-빠른-결과물을-얻을-수-있을-것-같다" class="headerlink" title="저번 코드에서 save_img 함수를 multi thread로 실행하면 좀 더 빠른 결과물을 얻을 수 있을 것 같다"></a>저번 코드에서 save_img 함수를 multi thread로 실행하면 좀 더 빠른 결과물을 얻을 수 있을 것 같다</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line">reg = re.<span class="built_in">compile</span>(<span class="string">&#x27;oimgurl: &quot;.&#123;0,300&#125;&quot;, cpid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://search.daum.net/search?w=img&amp;nil_search=btn&amp;DA=NTB&amp;enc=utf8&amp;q=%EA%B0%95%EC%95%84%EC%A7%80&#x27;</span></span><br><span class="line">html = requests.get(url=url)</span><br><span class="line">html_raw_data = <span class="built_in">str</span>(html.content)</span><br><span class="line"></span><br><span class="line">reg_iter = reg.finditer(html_raw_data)</span><br><span class="line">thread_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_img</span>(<span class="params">idx, img_url</span>):</span><br><span class="line">    res = requests.get(img_url).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;idx&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;save <span class="subst">&#123;idx&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, res_data <span class="keyword">in</span> <span class="built_in">enumerate</span>(reg_iter):</span><br><span class="line">    img_url = res_data.group().split(<span class="string">&#x27;oimgurl:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;, cpid&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    thread_worker = threading.Thread(target=save_img, args=(idx, img_url))</span><br><span class="line">    thread_worker.start()</span><br><span class="line">    thread_list.append(thread_worker)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> thread_list:</span><br><span class="line">    thread.join()</span><br><span class="line"></span><br><span class="line">t2 = time.time()</span><br><span class="line"><span class="built_in">print</span>(t2-t1)</span><br></pre></td></tr></table></figure><p>작업결과</p><img src="/2021/02/26/python-crawling-thread-async/result.PNG" class=""><h5 id="작업-시간이-1초대로-단축된-걸-확인-할-수-있다"><a href="#작업-시간이-1초대로-단축된-걸-확인-할-수-있다" class="headerlink" title="작업 시간이 1초대로 단축된 걸 확인 할 수 있다"></a>작업 시간이 1초대로 단축된 걸 확인 할 수 있다</h5><h3 id="2-concurrent-futures-사용으로-병렬-처리하기"><a href="#2-concurrent-futures-사용으로-병렬-처리하기" class="headerlink" title="2. concurrent.futures 사용으로 병렬 처리하기"></a>2. concurrent.futures 사용으로 병렬 처리하기</h3><h4 id="concurrent-futures는-비동기-처리-고수준-인터페이스-모듈이다-이-모듈을-써서-작업-시간을-줄여보자"><a href="#concurrent-futures는-비동기-처리-고수준-인터페이스-모듈이다-이-모듈을-써서-작업-시간을-줄여보자" class="headerlink" title="concurrent.futures는 비동기 처리 고수준 인터페이스 모듈이다 이 모듈을 써서 작업 시간을 줄여보자"></a>concurrent.futures는 비동기 처리 고수준 인터페이스 모듈이다 이 모듈을 써서 작업 시간을 줄여보자</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line">reg = re.<span class="built_in">compile</span>(<span class="string">&#x27;oimgurl: &quot;.&#123;0,300&#125;&quot;, cpid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://search.daum.net/search?w=img&amp;nil_search=btn&amp;DA=NTB&amp;enc=utf8&amp;q=%EA%B0%95%EC%95%84%EC%A7%80&#x27;</span></span><br><span class="line">html = requests.get(url=url)</span><br><span class="line">html_raw_data = <span class="built_in">str</span>(html.content)</span><br><span class="line"></span><br><span class="line">reg_iter = reg.finditer(html_raw_data)</span><br><span class="line">thread_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#url 이미지를 저장하는 함수</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_img</span>(<span class="params">idx, img_url</span>):</span><br><span class="line">    res = requests.get(img_url).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;idx&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 이미지 관련 작업은 pillow 모듈을 사용하는게 좋다</span></span><br><span class="line">        <span class="comment"># 예제에서는 사용 안함 (따로 설치가 필요)  </span></span><br><span class="line">        f.write(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;save <span class="subst">&#123;idx&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">10</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="keyword">for</span> idx, res_data <span class="keyword">in</span> <span class="built_in">enumerate</span>(reg_iter):</span><br><span class="line">        <span class="comment"># url 을 뽑아내는 전처리 작업</span></span><br><span class="line">        img_url = res_data.group().split(<span class="string">&#x27;oimgurl:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;, cpid&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        executor.submit(save_img, idx, img_url)</span><br><span class="line"></span><br><span class="line">t2 = time.time()</span><br><span class="line"><span class="built_in">print</span>(t2 - t1)</span><br></pre></td></tr></table></figure><p>작업결과</p><img src="/2021/02/26/python-crawling-thread-async/dog2.PNG" class=""><h5 id="마찬가지로-작업-시간이-1초대로-단축된-걸-확인-할-수-있다"><a href="#마찬가지로-작업-시간이-1초대로-단축된-걸-확인-할-수-있다" class="headerlink" title="마찬가지로 작업 시간이 1초대로 단축된 걸 확인 할 수 있다"></a>마찬가지로 작업 시간이 1초대로 단축된 걸 확인 할 수 있다</h5><blockquote><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>I&#x2F;O 작업이 있을 때 병렬 처리 작업을 활용하여 작업 시간을 단축시킬수 있다</li><li>상황에 따라 다르지만 될 수 있으면 thread 모듈보단 고수준 비동기 concurrent.futures 모듈을 사용하자 병렬처리 작업의 결과물을 리턴 받는 등 다양한 함수를 제공한다 <a href="https://docs.python.org/ko/3/library/concurrent.futures.html">참조링크</a></li></ul></blockquote><span id="more"></span>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/python/">python</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/python/">python</category>
      
      <category domain="https://hyunsuk2.github.io/tags/crawling/">crawling</category>
      
      <category domain="https://hyunsuk2.github.io/tags/thread/">thread</category>
      
      <category domain="https://hyunsuk2.github.io/tags/concurrent-futures/">concurrent.futures</category>
      
      
      <comments>https://hyunsuk2.github.io/2021/02/26/python-crawling-thread-async/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Beautifulsoup으로 이미지 크롤링 안될 때 다른 방법으로 크롤링하기</title>
      <link>https://hyunsuk2.github.io/2021/02/25/python-row-crawling/</link>
      <guid>https://hyunsuk2.github.io/2021/02/25/python-row-crawling/</guid>
      <pubDate>Thu, 25 Feb 2021 02:25:55 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;이미지-태그나-클래스명-등으로-크롤링-하려는데-안될-때-어떻게-해야할까&quot;&gt;&lt;a href=&quot;#이미지-태그나-클래스명-등으로-크롤링-하려는데-안될-때-어떻게-해야할까&quot; class=&quot;headerlink&quot; title=&quot;이미지 태그나 클래스명 등</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="이미지-태그나-클래스명-등으로-크롤링-하려는데-안될-때-어떻게-해야할까"><a href="#이미지-태그나-클래스명-등으로-크롤링-하려는데-안될-때-어떻게-해야할까" class="headerlink" title="이미지 태그나 클래스명 등으로 크롤링 하려는데 안될 때 어떻게 해야할까?"></a>이미지 태그나 클래스명 등으로 크롤링 하려는데 안될 때 어떻게 해야할까?</h3><blockquote><p>여러가지 방법이 있겠지만 이번 글에서는 <strong>python, re(정규식) 모듈, requests 모듈</strong>을 이용해서 크롤링을 해보려고한다<br>다음 이미지에서 강아지를 검색하면 브라우저 검색창에 아래 url이 나온다</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://search.daum.net/search?w=img&amp;nil_search=btn&amp;DA=NTB&amp;enc=utf8&amp;q=%EA%B0%95%EC%95%84%EC%A7%80</span><br></pre></td></tr></table></figure><blockquote><p>이 url을 이용해서 python으로 request를 날려보자<br>아래 사진을 보면 이미지 불러오는 url이 보인다 저 url을 정규식으로 추줄해보자<br>더 좋은 정규식이 있을 텐데 저는 저렇게 해서 추출했습니다<br>(정규식 내용은 분량이 큽니다 관심이 있으면 따로 찾아보자)<br><img src="/images/python-row-crawling-code_url.png" alt="code url"></p><ol><li>코드를 보자 정규식을 선언하고</li><li>url을 뽑아내는 전처리 작업을하고</li><li>이미지를 저장하는 코드룰 볼 수 있다</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="comment"># 정규식 선언</span></span><br><span class="line">reg = re.<span class="built_in">compile</span>(<span class="string">&#x27;oimgurl: &quot;.&#123;0,300&#125;&quot;, cpid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://search.daum.net/search?w=img&amp;nil_search=btn&amp;DA=NTB&amp;enc=utf8&amp;q=%EA%B0%95%EC%95%84%EC%A7%80&#x27;</span></span><br><span class="line">html = requests.get(url=url)</span><br><span class="line">html_raw_data = <span class="built_in">str</span>(html.content)</span><br><span class="line"></span><br><span class="line">reg_iter = reg.finditer(html_raw_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#url 이미지를 저장하는 함수</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_img</span>(<span class="params">idx, img_url</span>):</span><br><span class="line">    res = requests.get(img_url).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;idx&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 이미지 관련 작업은 pillow 모듈을 사용하는게 좋다</span></span><br><span class="line">        <span class="comment"># 예제에서는 사용 안함 (따로 설치가 필요)  </span></span><br><span class="line">        f.write(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;save <span class="subst">&#123;idx&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, res_data <span class="keyword">in</span> <span class="built_in">enumerate</span>(reg_iter):</span><br><span class="line">    <span class="comment"># url 을 뽑아내는 전처리 작업</span></span><br><span class="line">    img_url = res_data.group().split(<span class="string">&#x27;oimgurl:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;, cpid&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    save_img(idx, img_url)</span><br><span class="line"></span><br><span class="line">t2 = time.time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t2-t1)</span><br></pre></td></tr></table></figure><blockquote><p>이렇게 하면 이미지가 저장되는 걸 볼 수 있다<br><img src="/images/python-row-crawling-get_dog_picture.PNG" alt="강아지 이미지"><br>작업이 4초 넘게 걸렸는데 다음 포스트에서는 thread 와 비동기 함수를 사용하여<br>작업 시간을 단축시키는 포스트를 올려보겠습니다  </p></blockquote>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/python/">python</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/python/">python</category>
      
      <category domain="https://hyunsuk2.github.io/tags/crawling/">crawling</category>
      
      
      <comments>https://hyunsuk2.github.io/2021/02/25/python-row-crawling/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>하둡 공부 순서</title>
      <link>https://hyunsuk2.github.io/2021/02/23/hadoop-study-order/</link>
      <guid>https://hyunsuk2.github.io/2021/02/23/hadoop-study-order/</guid>
      <pubDate>Tue, 23 Feb 2021 14:29:21 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;하둡-공부-순서&quot;&gt;&lt;a href=&quot;#하둡-공부-순서&quot; class=&quot;headerlink&quot; title=&quot;하둡 공부 순서&quot;&gt;&lt;/a&gt;하둡 공부 순서&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;li&gt;MapReduce&lt;/li&gt;
&lt;li&gt;YARN&lt;/l</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="하둡-공부-순서"><a href="#하둡-공부-순서" class="headerlink" title="하둡 공부 순서"></a>하둡 공부 순서</h1><ol><li>HDFS</li><li>MapReduce</li><li>YARN</li><li>Avro</li><li>Parquet</li><li>Flume</li><li>Sqoop</li><li>Pig</li><li>Hive</li><li>Crunch</li><li>Spark</li><li>Hbase</li><li>Zookeeper</li></ol><h1 id="하둡-에코-시스템"><a href="#하둡-에코-시스템" class="headerlink" title="하둡 에코 시스템"></a>하둡 에코 시스템</h1><p><img src="/images/hadoop_eco_system.png" alt="하둡 에코 시스템"></p><blockquote><p><strong>HDFS</strong>, <strong>MapReduce</strong>, <strong>YARN</strong>은 하둡 기반 구성 요소라서 정확하게 이해할 필요성이 있다<br>다른 요소들은 필요한 순서대로 공부하면 될 듯</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/Hadoop/">Hadoop</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/hadoop/">hadoop</category>
      
      
      <comments>https://hyunsuk2.github.io/2021/02/23/hadoop-study-order/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>속도를 높이는 파이썬 코드</title>
      <link>https://hyunsuk2.github.io/2021/02/23/speed-up-python-code/</link>
      <guid>https://hyunsuk2.github.io/2021/02/23/speed-up-python-code/</guid>
      <pubDate>Tue, 23 Feb 2021 03:48:42 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;기존-파이썬-코드를-빠르게-만드는-방법&quot;&gt;&lt;a href=&quot;#기존-파이썬-코드를-빠르게-만드는-방법&quot; class=&quot;headerlink&quot; title=&quot;기존 파이썬 코드를 빠르게 만드는 방법&quot;&gt;&lt;/a&gt;기존 파이썬 코드를 빠르게 만드는 방법&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="기존-파이썬-코드를-빠르게-만드는-방법"><a href="#기존-파이썬-코드를-빠르게-만드는-방법" class="headerlink" title="기존 파이썬 코드를 빠르게 만드는 방법"></a>기존 파이썬 코드를 빠르게 만드는 방법</h3><ul><li>상황에 맞는 정확한 데이터 구조 사용<br> (list, tuple, set, dict, etc…)</li><li>for 루프 대신 while 루프 사용</li><li>컴프레헨션 사용</li><li>복수 할당 사용 ( a, b &#x3D; 1, 2)</li><li>될 수 있으면 global 키워드를 줄이자 연산 작업에 많은 시간을 소요한다</li><li>라이브러리를 활용</li><li>제너레이터 사용</li><li>.사용 자제 (use sqart instead of math.sqart)</li><li>무한 반복문에 1 사용 True 사용 보다 런타임 줄일수 있음</li><li>큰 데이터 처리는 pandas, numpy, scipy 사용</li></ul><p> <a href="https://www.loginradius.com/blog/async/speed-up-python-code/">참조링크</a></p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/python/">python</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/python/">python</category>
      
      <category domain="https://hyunsuk2.github.io/tags/speed-up/">speed up</category>
      
      
      <comments>https://hyunsuk2.github.io/2021/02/23/speed-up-python-code/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>하둡을 왜 쓰는 것일까?</title>
      <link>https://hyunsuk2.github.io/2021/02/21/start-hadoop-study/</link>
      <guid>https://hyunsuk2.github.io/2021/02/21/start-hadoop-study/</guid>
      <pubDate>Sun, 21 Feb 2021 12:34:49 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;하둡을-왜-쓰는-것일까&quot;&gt;&lt;a href=&quot;#하둡을-왜-쓰는-것일까&quot; class=&quot;headerlink&quot; title=&quot;하둡을 왜 쓰는 것일까?&quot;&gt;&lt;/a&gt;하둡을 왜 쓰는 것일까?&lt;/h3&gt;&lt;h4 id=&quot;빅데이터-처리&quot;&gt;&lt;a href=&quot;#빅데이터</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="하둡을-왜-쓰는-것일까"><a href="#하둡을-왜-쓰는-것일까" class="headerlink" title="하둡을 왜 쓰는 것일까?"></a>하둡을 왜 쓰는 것일까?</h3><h4 id="빅데이터-처리"><a href="#빅데이터-처리" class="headerlink" title="빅데이터 처리"></a>빅데이터 처리</h4><ul><li>인터넷 사용자들의 기록(비정형 데이터)</li><li>생물학의 데이터 과학 등</li></ul><h4 id="대용량-처리하기에는-기존-RDBMS는-비효율적"><a href="#대용량-처리하기에는-기존-RDBMS는-비효율적" class="headerlink" title="대용량 처리하기에는 기존 RDBMS는 비효율적"></a>대용량 처리하기에는 기존 RDBMS는 비효율적</h4><ul><li>비정형 데이터 분석 불가</li><li>확장하기가 힘들다</li><li>빅데이터 처리하기에 운영 비용이 기하급수적으로 비싸진다</li><li>빅데이터 처리 속도가 하둡 보다 느리다</li></ul>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/Hadoop/">Hadoop</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/hadoop/">hadoop</category>
      
      
      <comments>https://hyunsuk2.github.io/2021/02/21/start-hadoop-study/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/30/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/30/diary/</guid>
      <pubDate>Wed, 30 Jan 2019 14:12:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;i asked that how should i try to learn speak english to teacher.&lt;br&gt;the teacher said that dont think in korean just think in english.&lt;br&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>i asked that how should i try to learn speak english to teacher.<br>the teacher said that dont think in korean just think in english.<br>if i think in korean i have to translate to english, so when i think speaking english,<br>that make me bother and take time.<br>although it is unfamiliar to think in english first time i should do it to improve of it<br>let’s start to think in english during speaking or writing english</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/30/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/29/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/29/diary/</guid>
      <pubDate>Tue, 29 Jan 2019 14:36:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;i usually talk in english with engoo teacher during work&lt;br&gt;i realized i used same pattern and same word today&lt;br&gt;i wanna to express that</description>
        
      
      
      
      <content:encoded><![CDATA[<p>i usually talk in english with engoo teacher during work<br>i realized i used same pattern and same word today<br>i wanna to express that deviate from the pattern and words i use<br>i can’t express it<br>i think that it is important to speak english well that think in freely<br>i wanna to think in english logic when i use it<br>the day would come someday</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/29/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/28/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/28/diary/</guid>
      <pubDate>Mon, 28 Jan 2019 14:33:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;i got a health checkup today&lt;br&gt;i had though that i had some problem in body, but anything wasnt came out about problem so far.&lt;br&gt;to fig</description>
        
      
      
      
      <content:encoded><![CDATA[<p>i got a health checkup today<br>i had though that i had some problem in body, but anything wasnt came out about problem so far.<br>to figure out weather my body condition is good or not, i need to wait.<br>i thing i might not have any problem with the body.<br>nothing with any problem for body is good, but sometime i feel pain on the body.<br>okay maybe it is good to trust medical checkup and i live as usual.<br>anyway i wanna success my morning project all weekday</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/28/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/22/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/22/diary/</guid>
      <pubDate>Tue, 22 Jan 2019 12:33:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;i talked with friend on the phone on the bus after work.&lt;br&gt;we talked lots of things and it was continued when i got home.&lt;br&gt;the part th</description>
        
      
      
      
      <content:encoded><![CDATA[<p>i talked with friend on the phone on the bus after work.<br>we talked lots of things and it was continued when i got home.<br>the part that made me thought is that some question that if i could go back to past<br>when did i wanna go back.<br>i said some childhood and explain why i decided<br>then, suddenly i realized that i am real adult.<br>i think i am not old but i am not young, so i have to be careful to spend time to do something<br>actually i still dont know what is the best choice to do, but i will remember i wont live for others.</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/22/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/21/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/21/diary/</guid>
      <pubDate>Mon, 21 Jan 2019 14:12:55 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;wow i have to look back what i did for today to write a diary every week&lt;br&gt;it seem to good for our brain to remember something, but it’s</description>
        
      
      
      
      <content:encoded><![CDATA[<p>wow i have to look back what i did for today to write a diary every week<br>it seem to good for our brain to remember something, but it’s a little bit difficult that<br>what i write for dairy<br>anyway i feel uncomfortable that the day i didnt wake up early to do my plan<br>i wrote that i failed to wake up here sometimes to reflect on myself here<br>but it’s been nothing changed… <br>what the hell i did how can i do that<br>i don’t know the way   </p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/21/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/17/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/17/diary/</guid>
      <pubDate>Thu, 17 Jan 2019 14:22:26 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;we were working around the public park after launch with coworker&lt;br&gt;during working we were talking about success&lt;br&gt;then, one of my cowo</description>
        
      
      
      
      <content:encoded><![CDATA[<p>we were working around the public park after launch with coworker<br>during working we were talking about success<br>then, one of my coworker tell me about his friend in college<br>the friend always wake up at 5am and do so many things for self-developer<br>since 20 years old.<br>even she coded if there is noting to say when she was hanging out with friend<br>we were wondering how she live so<br>whatever if i wanna be something, i would have to do in sincerely</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/17/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/16/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/16/diary/</guid>
      <pubDate>Wed, 16 Jan 2019 13:37:39 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;it’s been a long time to go to gym since i went last time.&lt;br&gt;the reason why i did’nt go to gym is because i tried to go there when i ada</description>
        
      
      
      
      <content:encoded><![CDATA[<p>it’s been a long time to go to gym since i went last time.<br>the reason why i did’nt go to gym is because i tried to go there when i adapt to getup early.<br>rather, i think not to go there has weakened my stamina<br>so i felt my health was becoming weak.<br>i would go to gym again to overcome that<br>health is most important thing for people</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/16/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/15/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/15/diary/</guid>
      <pubDate>Tue, 15 Jan 2019 13:47:32 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;today i got a salary offer for this year.&lt;br&gt;although it’s gone up a lot by rate i am not happy with that.&lt;br&gt;because i think evaluation </description>
        
      
      
      
      <content:encoded><![CDATA[<p>today i got a salary offer for this year.<br>although it’s gone up a lot by rate i am not happy with that.<br>because i think evaluation of performance was not estimate in honest.<br>excecutive dont know that who work honestly and hard<br>they just like the people who are relate with there business<br>of course i think part of it is right<br>but they are needed to estimate in honest more </p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/15/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/14/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/14/diary/</guid>
      <pubDate>Mon, 14 Jan 2019 13:46:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;finally i started making andorid application with a frined&lt;br&gt;actually we have lots of things to make that.&lt;br&gt;but isn’t the saying that </description>
        
      
      
      
      <content:encoded><![CDATA[<p>finally i started making andorid application with a frined<br>actually we have lots of things to make that.<br>but isn’t the saying that the beginning is half done<br>so today is meaningful day.<br>although my friend dosnt enough time to do it because <br>he is preparing to get the job now<br>we have decided that we would meet once a week<br>i think the APP we are making is so useful to many things,<br>so i wanna finish this in success</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/14/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/11/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/11/diary/</guid>
      <pubDate>Fri, 11 Jan 2019 14:35:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;today is friday that i most like!&lt;br&gt;i used to like meeting freinds to drink and enjoy time on friday.&lt;br&gt;but i wanna take some rest thes</description>
        
      
      
      
      <content:encoded><![CDATA[<p>today is friday that i most like!<br>i used to like meeting freinds to drink and enjoy time on friday.<br>but i wanna take some rest these days.<br>ha, it is so difficult to wake up early morning.<br>i hope i get used to waking up early.<br>even though i have failed to get up some of days so far<br>it is gonna be better.</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/11/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/10/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/10/diary/</guid>
      <pubDate>Thu, 10 Jan 2019 13:44:30 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;i was talking about life of employee with co worker during having dinner&lt;br&gt;one of us said that whatever the company does to us, we have </description>
        
      
      
      
      <content:encoded><![CDATA[<p>i was talking about life of employee with co worker during having dinner<br>one of us said that whatever the company does to us, we have to do our work in honest<br>i didnt agree with that opinion, although working is our seconds life, we have our life each.<br>so we dont have to sacrifice to the company.<br>we have lots of things to do for getting so many experience.<br>i think the purpose of living here is getting experience<br>enjoy life!~  </p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/10/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/09/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/09/diary/</guid>
      <pubDate>Wed, 09 Jan 2019 14:36:56 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;i started to invest stocks 2days ago.&lt;br&gt;i saw a lots of profit when i checked my stock accont to find some stock i wanna invest.&lt;br&gt;the </description>
        
      
      
      
      <content:encoded><![CDATA[<p>i started to invest stocks 2days ago.<br>i saw a lots of profit when i checked my stock accont to find some stock i wanna invest.<br>the profit is what i get when i work for two days, so i felt good! please keep going up!~<br>anyway the reason i did it is that i wanted to recover my money that lost from investing bitcoin.<br>so i have to get money back~from anything…. although it is dangerous.<br>the plan for the investing is that i will forget that i invsted after investing all of money i deposit to invest.<br>i wish they are become big moeny when i check</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/09/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/08/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/08/diary/</guid>
      <pubDate>Tue, 08 Jan 2019 12:06:09 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;i couldn’t concentrate on my work because of the hangover&lt;br&gt;i think dringking will make me to in panic. so i should stop dringking&lt;br&gt;i </description>
        
      
      
      
      <content:encoded><![CDATA[<p>i couldn’t concentrate on my work because of the hangover<br>i think dringking will make me to in panic. so i should stop dringking<br>i will try.<br>i was thinking that i spend time learning english more than learing programming during going back home after work<br>it is needed to be balanced between them.<br>to do these is that i should spend time efficiantly<br>there’s a lot to do if i want to do lots of things</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/08/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;Diary&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/07/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/07/diary/</guid>
      <pubDate>Mon, 07 Jan 2019 12:05:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;i have to write diary in english here because i had party with company co worker.&lt;br&gt;i went out alone from comanpy party bucause i am hav</description>
        
      
      
      
      <content:encoded><![CDATA[<p>i have to write diary in english here because i had party with company co worker.<br>i went out alone from comanpy party bucause i am having sick on my liver.<br>it is first time to get pain to this<br>i think its time that i have to consiser my healty.<br>i thought i had considered my  healty before, but i didnt do it.<br>if i have free time for tommow i think i have to check my body.<br>they give me some signal to ask me check my body.<br>i wanna live here in healthy</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      
      <comments>https://hyunsuk2.github.io/2019/01/07/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>&#39;영어 일기&#39;</title>
      <link>https://hyunsuk2.github.io/2019/01/06/diary/</link>
      <guid>https://hyunsuk2.github.io/2019/01/06/diary/</guid>
      <pubDate>Sun, 06 Jan 2019 14:32:03 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;i will wirte english diary here from tommorow on&lt;br&gt;i hope i can archive that i made a plan for this year&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>i will wirte english diary here from tommorow on<br>i hope i can archive that i made a plan for this year</p>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/english/">english</category>
      
      <category domain="https://hyunsuk2.github.io/categories/english/diary/">diary</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/english/">english</category>
      
      
      <comments>https://hyunsuk2.github.io/2019/01/06/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ssh를 이용하여 원격 서버와 파일 양방향 전송하기</title>
      <link>https://hyunsuk2.github.io/2018/01/16/ssh/</link>
      <guid>https://hyunsuk2.github.io/2018/01/16/ssh/</guid>
      <pubDate>Mon, 15 Jan 2018 15:09:06 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1-ssh를-이용하여-파일-복사-및-전송하기&quot;&gt;&lt;a href=&quot;#1-ssh를-이용하여-파일-복사-및-전송하기&quot; class=&quot;headerlink&quot; title=&quot;1. ssh를 이용하여 파일 복사 및 전송하기&quot;&gt;&lt;/a&gt;1. ssh를 이용하여 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1-ssh를-이용하여-파일-복사-및-전송하기"><a href="#1-ssh를-이용하여-파일-복사-및-전송하기" class="headerlink" title="1. ssh를 이용하여 파일 복사 및 전송하기"></a>1. ssh를 이용하여 파일 복사 및 전송하기</h2><h6 id="ssh에서-제공하는-scp-명령어를-통해-로컬서버↔원격서버-파일을-양방향-전송할-수-있다"><a href="#ssh에서-제공하는-scp-명령어를-통해-로컬서버↔원격서버-파일을-양방향-전송할-수-있다" class="headerlink" title="ssh에서 제공하는 scp 명령어를 통해 로컬서버↔원격서버 파일을 양방향 전송할 수 있다."></a>ssh에서 제공하는 scp 명령어를 통해 로컬서버↔원격서버 파일을 양방향 전송할 수 있다.</h6><h4 id="1-1-사용방법"><a href="#1-1-사용방법" class="headerlink" title="1.1 사용방법"></a>1.1 사용방법</h4><ul><li>원격 서버 → 로컬 서버로 파일 전송 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scp [옵션] [계정명]@[원격지IP주소]:[원본 경로 및 파일] [전송받을 위치]</span></span><br></pre></td></tr></table></figure><pre><code> 예제1) IP 111.222.333.444 서버의 abc라는 계정으로 /home/abc/index.html 파일을  로컬서버 /home/me/ 디렉토리에 전송 받기</code></pre> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scp abc@111.222.333.444:/home/abc/index.html /home/me/</span></span><br></pre></td></tr></table></figure><pre><code> 예제2) (ssh의 기본 22번 포트가 아닐경우)IP 111.222.333.444 서버의  abc라는 계정으로 /home/abc/index.html 파일을 로컬서버 /home/me/ 디렉토리에 전송 받기   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scp -P 321 abc@111.222.333.444:/home/abc/index.html /home/me/ (ssh 포트가 321일경우)</span></span><br></pre></td></tr></table></figure></code></pre></li></ul><hr><ul><li>로컬 서버 → 원격 서버로 파일 전송   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scp [옵션] [원본 경로 및 파일] [계정명]@[원격지IP주소]:[전송할 경로]</span></span><br></pre></td></tr></table></figure><pre><code> 예제1) 로컬서버 /home/me/wow.html 파일을 IP 111.222.333.444 서버의 /home/abc/  디렉토리에 전송 하기</code></pre>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scp /home/me/wow.html abc@111.222.333.444:/home/abc/</span></span><br></pre></td></tr></table></figure><pre><code> 예제2) (ssh의 기본 22번 포트가 아닐경우)로컬서버 /home/me/wow.html 파일을  IP 111.222.333.444 서버의 /home/abc/ 디렉토리에 전송 하기</code></pre>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scp -P 321 /home/me/wow.html abc@111.222.333.444:/home/abc/ (ssh 포트가 321일경우)</span></span><br></pre></td></tr></table></figure></li><li><strong>[주의사항]</strong><br>   옵션중에 –P와 –p가 있으니 대&#x2F;소문자 확인을 하여야 한다.<br>   -P : 포트번호를 지정함<br>   -p : 원본파일 수정&#x2F;사용시간 및 권한을 유지함<br>   -r : 하위 디렉토리 및 파일 모두 복사함</li></ul><hr><hr><hr><blockquote><p>상황을 가장 잘 활용하는 사람이 가장 좋은 상황을 맞는다</p><footer><strong>John Robert Wooden</strong></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/Linux/">Linux</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/ssh/">ssh</category>
      
      <category domain="https://hyunsuk2.github.io/tags/scp/">scp</category>
      
      <category domain="https://hyunsuk2.github.io/tags/file-trans/">file trans</category>
      
      
      <comments>https://hyunsuk2.github.io/2018/01/16/ssh/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Angular 준비하기</title>
      <link>https://hyunsuk2.github.io/2018/01/15/angular/</link>
      <guid>https://hyunsuk2.github.io/2018/01/15/angular/</guid>
      <pubDate>Sun, 14 Jan 2018 15:40:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1-Angular-학습전-알아야-할-핵심-2가지&quot;&gt;&lt;a href=&quot;#1-Angular-학습전-알아야-할-핵심-2가지&quot; class=&quot;headerlink&quot; title=&quot;1 Angular 학습전 알아야 할 핵심 2가지&quot;&gt;&lt;/a&gt;1 Angula</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1-Angular-학습전-알아야-할-핵심-2가지"><a href="#1-Angular-학습전-알아야-할-핵심-2가지" class="headerlink" title="1 Angular 학습전 알아야 할 핵심 2가지"></a>1 Angular 학습전 알아야 할 핵심 2가지</h2><h3 id="1-1-Node-js"><a href="#1-1-Node-js" class="headerlink" title="1.1 Node.js"></a>1.1 Node.js</h3><ul><li>서버 사이드 자바 스크립트 실행환경</li><li>자바스크립트는 node.js가 설치된곳이면 어디서든지 실행 가능</li><li>자바 스크립트에게 브라우저라는 실행환경을 벗어나게 해줌</li></ul><h3 id="1-2-NPM-Node-Pakage-Manager"><a href="#1-2-NPM-Node-Pakage-Manager" class="headerlink" title="1.2 NPM(Node Pakage Manager)"></a>1.2 NPM(Node Pakage Manager)</h3><ul><li>node.js 의 패키지(자바스크립트, HTML, CSS 등) 관리도구</li><li>소스를 패키지로 공유할 수 있고 패키지 의존성 관리를 가능하게함</li><li>Angular 또한 NPM 기반으로 프로젝트를 구성하고 의존성 패키지를 관리함</li></ul><hr><h2 id="2-NPM-다루기"><a href="#2-NPM-다루기" class="headerlink" title="2 NPM 다루기"></a>2 NPM 다루기</h2><h3 id="2-1-package-json"><a href="#2-1-package-json" class="headerlink" title="2.1 package.json"></a>2.1 package.json</h3><ul><li>프로젝트 생성시에 제일 먼저 생성해야 할 JSON 파일로 패키지와 의존 패키지 정보등을 선언함<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;welcome-msg-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;http-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.9.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.12.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-NPM-주요-명령어"><a href="#2-2-NPM-주요-명령어" class="headerlink" title="2.2 NPM 주요 명령어"></a>2.2 NPM 주요 명령어</h3><ul><li><p><strong>npm install:</strong> pakage.json 파일 있는 경우 파일에 선언된 의존패키지를 설치하고<br>npm install 뒤에 패키지명 입력하면 해당 패키지 설치함</p></li><li><p><strong>npm run:</strong> pakage.json의 scripts에 선언된 명령을 수행</p></li></ul><hr><hr><hr> <blockquote><p>사랑에는 실패가 없다.</p><footer><strong>Amelie Nothomb</strong></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/Angular/">Angular</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/angular/">angular</category>
      
      
      <comments>https://hyunsuk2.github.io/2018/01/15/angular/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>컴퓨터 보안 진로</title>
      <link>https://hyunsuk2.github.io/2018/01/15/secuermap/</link>
      <guid>https://hyunsuk2.github.io/2018/01/15/secuermap/</guid>
      <pubDate>Sun, 14 Jan 2018 15:40:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1-컴퓨터-보안-입문-하고자-할-때-알아야할-것&quot;&gt;&lt;a href=&quot;#1-컴퓨터-보안-입문-하고자-할-때-알아야할-것&quot; class=&quot;headerlink&quot; title=&quot;1 컴퓨터 보안 입문 하고자 할 때 알아야할 것&quot;&gt;&lt;/a&gt;1 컴퓨터 보안</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1-컴퓨터-보안-입문-하고자-할-때-알아야할-것"><a href="#1-컴퓨터-보안-입문-하고자-할-때-알아야할-것" class="headerlink" title="1 컴퓨터 보안 입문 하고자 할 때 알아야할 것"></a>1 컴퓨터 보안 입문 하고자 할 때 알아야할 것</h2><h4 id="보안을-처음-시작하려는-사람들은-보안회사에-들어가면-크게-4가지-일-중-하나를-하고-싶어한다"><a href="#보안을-처음-시작하려는-사람들은-보안회사에-들어가면-크게-4가지-일-중-하나를-하고-싶어한다" class="headerlink" title="보안을 처음 시작하려는 사람들은 보안회사에 들어가면 크게 4가지 일 중 하나를 하고 싶어한다"></a>보안을 처음 시작하려는 사람들은 보안회사에 들어가면 크게 4가지 일 중 하나를 하고 싶어한다</h4><h5 id="1-웹해킹"><a href="#1-웹해킹" class="headerlink" title="1. 웹해킹"></a>1. 웹해킹</h5><h5 id="2-시스템-해킹"><a href="#2-시스템-해킹" class="headerlink" title="2. 시스템 해킹"></a>2. 시스템 해킹</h5><h5 id="3-어플리케이션-해킹"><a href="#3-어플리케이션-해킹" class="headerlink" title="3. 어플리케이션 해킹"></a>3. 어플리케이션 해킹</h5><h5 id="4-네트워크-해킹"><a href="#4-네트워크-해킹" class="headerlink" title="4. 네트워크 해킹"></a>4. 네트워크 해킹</h5><h6 id="이것들을-하기-위한-보안-학습-로드맵을-보자"><a href="#이것들을-하기-위한-보안-학습-로드맵을-보자" class="headerlink" title="이것들을 하기 위한 보안 학습 로드맵을 보자"></a>이것들을 하기 위한 보안 학습 로드맵을 보자</h6><p><img src="/images/securityloademap.png" alt="보안 공부 로드맵"></p><blockquote><p>로드맵을 보면 알다시피 보안을 하기 위해선 <strong>컴퓨터의 전반적인 지식</strong>을 알아야 할 수 있는것이다.<br> 때문에 처음부터 보안회사를 들어 가는것 보다는 웹해킹을 하고싶으면 <strong>웹개발 회사</strong>, 시스템 해킹을 하고싶으면 <strong>시스템 개발 등</strong> 으로 진로를 잡고, <strong>나중에 경력이 쌓이면</strong> 보안 진로로 가는게 좋다고 생각한다. 컴퓨터의 기본은 개발이 아닐까?</p></blockquote><h2 id="2-필자가-아는-국내-보안-진로-분야"><a href="#2-필자가-아는-국내-보안-진로-분야" class="headerlink" title="2 필자가 아는 국내 보안 진로 분야"></a>2 필자가 아는 국내 보안 진로 분야</h2><h5 id="2-1-웹-해킹"><a href="#2-1-웹-해킹" class="headerlink" title="2.1 웹 해킹"></a>2.1 웹 해킹</h5><h5 id="2-2-시스템-해킹"><a href="#2-2-시스템-해킹" class="headerlink" title="2.2 시스템 해킹"></a>2.2 시스템 해킹</h5><h5 id="2-3-어플리케이션-해킹"><a href="#2-3-어플리케이션-해킹" class="headerlink" title="2.3 어플리케이션 해킹"></a>2.3 어플리케이션 해킹</h5><h5 id="2-4-네트워크-해킹"><a href="#2-4-네트워크-해킹" class="headerlink" title="2.4 네트워크 해킹"></a>2.4 네트워크 해킹</h5><h5 id="2-5-해킹-툴-개발"><a href="#2-5-해킹-툴-개발" class="headerlink" title="2.5 해킹 툴 개발"></a>2.5 해킹 툴 개발</h5><h5 id="2-6-백신-개발"><a href="#2-6-백신-개발" class="headerlink" title="2.6 백신 개발"></a>2.6 백신 개발</h5><h5 id="2-7-기술-컨설팅"><a href="#2-7-기술-컨설팅" class="headerlink" title="2.7 기술 컨설팅"></a>2.7 기술 컨설팅</h5><h5 id="2-8-관리-컨설팅"><a href="#2-8-관리-컨설팅" class="headerlink" title="2.8 관리 컨설팅"></a>2.8 관리 컨설팅</h5><h5 id="2-9-시스템-운영"><a href="#2-9-시스템-운영" class="headerlink" title="2.9 시스템 운영"></a>2.9 시스템 운영</h5><h5 id="2-10-관제"><a href="#2-10-관제" class="headerlink" title="2.10 관제"></a>2.10 관제</h5><h6 id="해킹과-개발이-아닌-컨설팅과-운영-관제-분야는-전문적인-기술을-요하지-않는다"><a href="#해킹과-개발이-아닌-컨설팅과-운영-관제-분야는-전문적인-기술을-요하지-않는다" class="headerlink" title="해킹과 개발이 아닌 컨설팅과 운영, 관제 분야는 전문적인 기술을 요하지 않는다"></a>해킹과 개발이 아닌 컨설팅과 운영, 관제 분야는 전문적인 기술을 요하지 않는다</h6><hr><hr><hr> <blockquote><p>큰 목표를 이루고 싶으면 허락을 구하지 마라. </p><footer><strong>미상</strong></footer></blockquote>]]></content:encoded>
      
      
      <category domain="https://hyunsuk2.github.io/categories/IT/">IT</category>
      
      <category domain="https://hyunsuk2.github.io/categories/IT/Security/">Security</category>
      
      
      <category domain="https://hyunsuk2.github.io/tags/Security/">Security</category>
      
      
      <comments>https://hyunsuk2.github.io/2018/01/15/secuermap/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
